
(define-minor-mode org-config-files-local-mode
    "Minor mode for editing configuration files in org-mode." 
    :init-value nil)
(define-key org-config-files-local-mode-map (kbd "<SPC>") 'insert-space) 
(setq abbrev-mode nil) )

You can toggle it in necessary files by setting the local variables section at the end of the file as follows. You can also change or add the keybinding here. You will still need to define different minor modes for each buffer that maps the same key-sequence to different commands.

 # Local Variables:
 # org-config-files-local-mode: t
 # eval: (define-key org-config-files-local-mode-map (kbd "<SPC>") 'insert-space) 
 # End: 
;;;   Current time:      (current-time-string)
;;;   Last command:      last-command
;;; (abbrev-mode)
(user-full-name)

* file settings                                                     :ARCHIVE:
#+OPTIONS: f:t
#+TODO: TODO PLEASE-TEST TESTING PLEASE-DEBUG | DONE
#+TODO: | NOTE-TO-JAY NOTE-TO-RÚDI NOTE-TO-RÚDI
#+TODO: PLEASE-CHECK-MY-INEPT-CODE PLEASE-HELP-ME-DEBUG-MY-INEPT-CODE TRY-THIS | DONE

# Local Variables:
# enable-local-eval: t 
# eval: (make-local-variable abbrev-mode) 
# eval: (define-key org-mode-map (kbd "<SPC>") 'insert-space) 
# eval: (setq abbrev-mode nil) 
# end: 

#+TITLE:Jay Dixit's Emacs setup - May 22, 2015.

* About
  - System: Mac OSX Yosemite
  - Emacs version: 24.5.1
  - Use case: I use this file with both GNU Emacs for OSX and for Aquamacs.

* Set up packages
** Load the proper repositories

#+BEGIN_SRC emacs-lisp
(require 'package)

(add-to-list 'package-archives
             '("marmalade" .
               "http://marmalade-repo.org/packages/" ))
(add-to-list 'package-archives
             '("melpa" . "http://melpa.milkbox.net/packages/") t)

(add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/") t)

(add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/") t)

(package-initialize)
#+END_SRC

*** Load some of my packages:
#+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "~/Dropbox/emacs/prelude/personal/")
#+END_SRC

** Require some packages
#+BEGIN_SRC emacs-lisp
(require 'org)
#+END_SRC
   
* Require some org packages
#+BEGIN_SRC emacs-lisp
;; (require 'org-bullets)
(require 'ox-latex)
(require 'ox-org)
  (require 'ox-html)

; (require 'org-fstree)
#+END_SRC

* Set up spellcheck 
** Spellcheck add word
#+BEGIN_SRC emacs-lisp
(defun add-word-to-personal-dictionary ()
  (interactive)
  (let ((current-location (point))
        (word (flyspell-get-word)))
    (when (consp word)
      (flyspell-do-correct 'save nil (car word) current-location (cadr word) (caddr word) current-location))))
#+END_SRC

** Turn on on-the-fly spellcheck for org-mode

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-flyspell)
#+END_SRC

* UI / customization of appearance and editing environment
** Stop accidentally highlighting org-mode links all the time:

#+BEGIN_SRC emacs-lisp
(setq mouse-highlight nil)
(setq-local cursor-in-non-selected-windows nil) 

#+END_SRC

** Ask before exiting Emacs

#+BEGIN_SRC emacs-lisp
(setq confirm-kill-emacs 'yes-or-no-p)
#+END_SRC

** System alarms

In some cases, you'd like to reduce the number of warnings or eliminate warnings in certain conditions. The following turns off the alarm bell when you hit C-g in the minibuffer or during an isearch:
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function
      (lambda ()
	(unless (memq this-command
		      '(isearch-abort abort-recursive-edit exit-minibuffer keyboard-quit))
	  (ding))))
#+END_SRC

Also, change the alert sound. Instead of beeping or flashing, Emacs could play a cool sound file, whenever an error occurs:
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function (lambda () (play-sound-file "~/sounds/InkSoundStroke3.mp3")))
#+END_SRC


** Red cursor mode

This customization with the big blocky boxy red cursor makes me so happy.
# #+BEGIN_SRC emacs-lisp
(setq-default cursor-type 'box) 
(set-cursor-color "red")
(setq default-frame-alist
      '((cursor-color . "red")))
(add-to-list 'default-frame-alist '(cursor-color . "red"))
# #+END_SRC

And create a function to restore the red cursor in case a color-theme overwrites it:
#+BEGIN_SRC emacs-lisp
(defun  incarnadine-cursor ()
  (interactive)
  (set-cursor-color "red")
  (setq default-frame-alist
	'((cursor-color . "red")))
  (add-to-list 'default-frame-alist '(cursor-color . "red")))
#+END_SRC

** Split windows correctly

#+BEGIN_SRC emacs-lisp
(setq org-indirect-buffer-display 'current-window)
(setq undo-limit 100000)
(setq split-width-threshold 75)
#+END_SRC

** Use visual line mode whenever possible

#+BEGIN_SRC emacs-lisp
(add-hook 'org-mode-hook 'turn-on-visual-line-mode)
(add-hook 'mail-mode-hook 'turn-on-visual-line-mode)
(add-hook 'message-mode-hook 'turn-on-visual-line-mode)
(visual-line-mode t)
(global-visual-line-mode t)
#+END_SRC

** Highlight current line

#+BEGIN_SRC emacs-lisp
;; (global-hl-line-mode t) ; turn it on for all modes by default
;; (global-hl-line-mode)
(make-variable-buffer-local 'global-hl-line-mode)
(add-hook 'message-mode-hook (lambda () (setq global-hl-line-mode nil)))
#+END_SRC

** Autofill mode

Turn off fill mode, which adds random line breaks in my text files:
#+BEGIN_SRC emacs-lisp
(auto-fill-mode -1)
(add-hook 'text-mode-hook  '(lambda () (auto-fill-mode -1)))
(add-hook 'org-mode-hook  '(lambda () (auto-fill-mode -1)))
;; (add-hook 'org-mode-hook  '(lambda () (writegood-mode 1)))
(add-hook 'markdown-mode-hook  '(lambda () (auto-fill-mode -1)))
(add-hook 'message-mode-hook  '(lambda () (auto-fill-mode -1)))
#+END_SRC

** Sounds

#+BEGIN_SRC emacs-lisp
(unless (and (fboundp 'play-sound-internal)
	     (subrp (symbol-function 'play-sound-internal)))
  (require 'play-sound))


(add-hook 'org-after-todo-state-change-hook 'my-org-after-todo)
(defun my-org-after-todo ()
  (play-sound-file "~/sounds/InkSoundStroke3.mp3"))
#+END_SRC

* Editing / environment settings
** Disable double spacing between sentences

#+BEGIN_SRC emacs-lisp
(setq sentence-end-double-space nil)
#+END_SRC

** Enable auto-revert

#+BEGIN_SRC emacs-lisp
(global-auto-revert-mode 1)
#+END_SRC

** Make typing override text selection

#+BEGIN_SRC emacs-lisp
(delete-selection-mode 1)
#+END_SRC

** Automatically pair parentheses
#+BEGIN_SRC emacs-lisp
(autopair-mode 1)
(setq buffer-save-without-query nil)
#+END_SRC

** Search in Spotlight
#+BEGIN_SRC emacs-lisp
(setq locate-command "mdfind")
#+END_SRC

** Automatically open files in their correct modes

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.txt" . org-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.msg" . message-mode) auto-mode-alist))
(add-to-list 'auto-mode-alist '("\\.org\\'" . org-mode))
(add-to-list 'auto-mode-alist '("\\.abbrev_defs\\'" . org-mode))
(add-to-list 'auto-mode-alist '("README$" . org-mode))
(add-to-list 'auto-mode-alist '("shared-functions$" . emacs-lisp-mode))
(add-to-list 'auto-mode-alist '("gnu-emacs-startup$" . emacs-lisp-mode))
(add-hook 'emacs-lisp-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'css-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'html-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'html-helper-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'eshell-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'shell-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'shell-script-mode-hook (lambda () (abbrev-mode -1)))
(add-hook 'term-mode-hook (lambda () (abbrev-mode -1)))
(add-to-list 'auto-mode-alist '("COMMIT_EDITMSG$" . diff-mode))
(add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
(add-to-list 'auto-mode-alist '("\\.rb$" . ruby-mode))
(add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
(add-to-list 'auto-mode-alist '("\\.js\\(on\\)?$" . js2-mode))
(add-to-list 'auto-mode-alist '("\\.xml$" . nxml-mode))
(add-to-list 'auto-mode-alist '("\\.fountain$" . fountain-mode)) 
#+END_SRC

* Org-mode
** Org setup
*** Some favorite ~org~ settings:
#+BEGIN_SRC emacs-lisp
(setq org-use-property-inheritance t)
(setq org-ctrl-k-protect-subtree t)
(setq org-clock-persist 'history)
(org-clock-persistence-insinuate)
(setq org-clock-persist t)
(setq org-export-with-smart-quotes t)
(setq org-fontify-quote-and-verse-blocks t)
;; blank lines before new headings
(setq org-blank-before-new-entry
      '((heading . always)
       (plain-list-item . nil)))
(setq org-return-follows-link t)
(setq org-export-with-planning t)

;; leave an empty line between folded subtrees
(setq org-cycle-separator-lines 1)

#+END_SRC

*** Load my org modules
#+BEGIN_SRC emacs-lisp
'(org-modules (quote (org-info org-jsinfo org-pomodoro org-mac-link org-mime )))
#+END_SRC
** Org custom functions
*** Archiving
(defadvice org-archive-subtree (around my-org-archive-subtree activate)
  (let ((org-archive-location
	 (if (save-excursion (org-back-to-heading)
			     (> (org-outline-level) 1))
	     (concat (car (split-string org-archive-location "::"))
		     "::* "
		     (car (org-get-outline-path)))
	   org-archive-location)))
    ad-do-it))
#+END_SRC
*** org-mode speed commands
#+BEGIN_SRC emacs-lisp
(setq org-use-speed-commands t)
(setq org-speed-commands-user (quote (
                                      ("k" . org-kill-note-or-show-branches)
                                      ("q" . bh/show-org-agenda)
                                      ("h" . org-agenda-schedule)
                                      ("d" . org-deadline)
                                      ("w" . org-refile)
                                      ("z" . org-add-note)
                                      ("A" . org-archive-subtree-default-with-confirmation)
                                      ("J" . org-clock-goto)
                                      ("Z" . ignore))))
#+END_SRC

** org-export

   #+BEGIN_SRC emacs-lisp

(setq org-export-allow-bind-keywords t)
 (setq org-export-blocks-witheld (quote (hidden)))
 (setq org-export-date-timestamp-format "%Y%m%d %I:%M%p")
 (setq org-export-html-inline-image-extensions (quote ("png" "jpeg" "jpg" "gif" "svg" "tif" "gif")))
 (setq org-export-html-style-include-default t)
 (setq org-export-latex-date-format "%d %B %Y.")
 (setq org-export-latex-emphasis-alist (quote (("*" "\\emph{%s}" nil) ("/" "\\textit{%s}" nil) ("_" "\\underline{%s}" nil) ("+" "\\st{%s}" nil) ("=" "\\verb" t) ("~" "\\verb" t))))
 (setq org-export-latex-verbatim-wrap (quote ("\\begin{quote}" . "\\end{quote}")))
 (setq org-export-with-clocks t)
 (setq org-export-with-drawers t)
 (setq org-export-with-section-numbers nil)
 (setq org-export-with-toc nil)

'(org-export-latex-emphasis-alist (quote    (("*" "\\emph{%s}" nil)
     ("/" "\\textit{%s}" nil)
     ("_" "\\underline{%s}" nil)
     ("+" "\\st{%s}" nil)
     ("=" "\\verb" t)
     ("~" "\\verb" t))))

'(org-html-footnotes-section
   "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s </h2>
<div id=\"footnote\">
%s
</div>
</div>")

'(org-html-text-markup-alist (quote    ((bold . "<strong>%s</strong>")
     (code . "<blockquote>%s</blockquote>")
     (italic . "<em>%s</em>")
     (strike-through . "<del>%s</del>")
     (underline . "<span class=\"underline\">%s</span>")
     (verbatim . "<code>%s</code>"))))

'(org-latex-text-markup-alist (quote    ((bold . "\\textbf{%s}")
     (code . verb)
     (italic . "\\textit{%s}")
     (strike-through . "\\sout{%s}")
     (underline . "\\uline{%s}")
     ;; (verbatim . protectedtext)
     )))

'(org-latex-toc-command "\\tableofcontents
\\newpage
")

'(safe-local-variable-values (quote    ((eval when
	   (fboundp
	    (quote rainbow-mode))
	   (rainbow-mode 1)))))

'(org-html-footnotes-section "<div id=\"footnotes\">
<h2 class=\"footnotes\">%s </h2>
<div id=\"footnote\">
%s
</div>
</div>") 
   #+END_SRC

** Org-mode key bindings:
#+BEGIN_SRC emacs-lisp
(define-key global-map "\C-cc" 'org-capture)
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cl" 'org-store-link)
(global-set-key "\C-ca" 'org-agenda)
#+END_SRC
** Org agenda

*** agenda display settings

    #+BEGIN_SRC emacs-lisp
(setq org-agenda-prefix-format
   (quote
    ((agenda . " %?-12t% s")
     (timeline . "  % s")
     (todo . " %i %-12:c")
     (tags . " %i %-12:c")
     (search . " %i %-12:c"))))

;; (setq org-agenda-prefix-format "%t %s")
    #+END_SRC

*** Stop mouse cursor from highlighting lines in org-agenda
#+BEGIN_SRC emacs-lisp
(add-hook 'org-finalize-agenda-hook
          (lambda () (remove-text-properties
                      (point-min) (point-max) '(mouse-face t))))
#+END_SRC

** org stuck projects (?)
Defining stuck projects as todos that do not contain "scheduled" or
"deadline". See also [[http://www.gnu.org/software/emacs/manual/html_node/org/Stuck-projects.html][here]].
#+BEGIN_SRC emacs-lisp
(setq org-stuck-projects
      '("TODO={.+}/-DONE" nil nil "SCHEDULED:\\|DEADLINE:"))
#+END_SRC

** Org settings
#+BEGIN_SRC emacs-lisp
(add-hook 'after-init-hook 'org-agenda-list)
(require 'org-inlinetask)
;; Overwrite the current window with the agenda
(setq org-agenda-window-setup 'current-window)

;; Delete IDs When Cloning
(setq org-clone-delete-id t)

;; start org in folded mode
(setq org-startup-folded t)

;; allow alphabetical list entries, i.e. "a. this b. that c. another"
(setq org-alphabetical-lists t)

;; fast TODO selection
(setq org-use-fast-todo-selection t)

;; more org settings
(setq org-treat-S-cursor-todo-selection-as-state-change nil)

(setq org-src-fontify-natively t)

;; (add-to-list 'load-path (expand-file-name "~/git/org-mode/lisp"))
#+END_SRC

*** Activate org-mode automatically

#+BEGIN_SRC emacs-lisp
(add-to-list 'auto-mode-alist '("\\.\\(org\\|org_archive\\|txt\\|txt_archive\\)$" . org-mode))
#+END_SRC

** Org keywords
#+BEGIN_SRC emacs-lisp
(setq org-todo-keywords
      '(
        (sequence "TODO" "MISSED" "|" "DONE! :-)")
        (sequence "DELEGATE" "DELEGATED" "|" "DONE! :-)")
        (sequence "QUESTION" "|" "ANSWERED")
        (sequence "QUESTIONS" "|" "ANSWERS")
        (sequence "SOMEDAY/MAYBE" "|" "DONE! :-)")
        (sequence "MAYBE" "|" "MAYBE NOT" "DONE! :-)")
        (sequence "NEXT" "|" "DONE! :-)")
        (sequence "DID NOT DO :-/" "STARTED" "|" "DONE! :-)")
        (sequence "STRATEGY" "|")
(sequence "DONE" "|")
        (sequence "IF" "THEN" "|")
        (sequence "GOAL" "PLAN" "|" "DONE! :-)")
        ))
#+END_SRC

** Protect org headings from accidental demotion
Don't delete headings unless I specifically say so. So i.e. when I hit delete, don't delete stars, only content.
#+BEGIN_SRC emacs-lisp
(defun new-org-delete-backward-char (N)
  (interactive "p")
  (cond ((region-active-p)
         (delete-region
          (region-beginning)
          (region-end)))
        ((looking-back "[*]+ ")
         (previous-line)
         (end-of-line))
        (t
         (org-delete-backward-char N))))
(add-hook
 'org-mode-hook
 (lambda ()
   (define-key org-mode-map (kbd "DEL")
     'new-org-delete-backward-char)))
#+END_SRC

** Org export
*** Change section numbering depending on what export format I use

Turn this on if I'm creating documents that I want to export to both HTML and LaTeX. For now I'm turning it off.

#+BEGIN_EXAMPLE emacs-lisp
(defun my-org-export-change-options (plist backend)
  (cond
   ((equal backend 'html)
    (plist-put plist :with-toc nil)
    (plist-put plist :section-numbers nil))
   ((equal backend 'latex)
    (plist-put plist :with-toc t)
    (plist-put plist :section-numbers t)))
  plist)
(add-to-list 'org-export-filter-options-functions 'my-org-export-change-options)
#+END_EXAMPLE

*** export with drawers
#+BEGIN_SRC emacs-lisp
(setq org-export-with-drawers t)
(defun jbd-org-export-format-drawer (name content)
  "Export drawers to drawer HTML class."
  (setq content (org-remove-indentation content))
  (format "@<div class=\"drawer\">%s@</div>\n" content))
(setq org-export-format-drawer-function 'jbd-org-export-format-drawer)
(setq org-icalendar-include-todo t)
#+END_SRC

** Org-mode hooks and other org settings
#+BEGIN_SRC emacs-lisp
'(initial-major-mode (quote org-mode))
(add-hook 'org-mode-hook 'turn-on-font-lock)
'(org-replace-disputed-keys t)
'(org-use-extra-keys nil)
'(org-adapt-indentation nil)
'(org-edit-src-content-indentation 4)
'(org-ellipsis (quote org-warning))
'(org-enforce-todo-checkbox-dependencies t)
'(org-enforce-todo-dependencies t)
'(org-html-postamble nil)
'(org-fontify-emphasized-text t)
'(org-src-preserve-indentation t)
'(org-startup-align-all-tables t)
'(org-startup-folded showeverything)
'(org-startup-indented nil)
'(org-hide-leading-stars t)
'(org-indent-mode-turns-off-org-adapt-indentation nil)
'(org-indent-mode-turns-on-hiding-stars nil)
'(org-insert-mode-line-in-empty-file t)
'(org-list-indent-offset 3)
'(org-log-done (quote time))
'(org-log-refile (quote time))
'(org-n-level-faces 9)
'(org-odd-levels-only nil)
'(org-priority-faces nil)
'(org-provide-checkbox-statistics t)
;; '(add-hook 'org-mode-hook (lambda () (org-bullets-mode 1)))
(setq org-directory "~/Dropbox/writing/notationaldata/")
(setq org-default-notes-file (concat org-directory "notes.txt"))
#+END_SRC

** Org refile settings
*** Exclude ~DONE~ state tasks from refile targets:
#+BEGIN_SRC emacs-lisp
(defun bh/verify-refile-target ()
  "Exclude todo keywords with a done state from refile targets"
  (not (member (nth 2 (org-heading-components)) org-done-keywords)))
(setq org-refile-target-verify-function 'bh/verify-refile-target)
#+END_SRC

** Fix '\emsp' bug in clocktable (doesn't work though):
#+BEGIN_SRC emacs-lisp
(defun my-org-clocktable-indent-string (level)
  (if (= level 1)
      ""
    (let ((str "^"))
      (while (> level 2)
        (setq level (1- level)
              str (concat str "--")))
      (concat str "-> "))))
(advice-add 'org-clocktable-indent-string :override #'my-org-clocktable-indent-string)
#+END_SRC

** org-capture setup

This is working correctly:
#+BEGIN_SRC emacs-lisp
(setq org-capture-templates
      (quote
       (
        ("m" "Mail" entry (file+olp org-default-notes-file "Emails") "** Email %T
From: Jay Dixit <dixit@aya.yale.edu>
To: %^{Send mail to}
Subject: %^{Subject}
--text follows this line--
%?")

	("g" "gratitude" entry (file "gratitude.txt")
	 "\n\n\n\n* %U\n\n1. %?\n\n" :prepend t :kill-buffer t)

	("L" "Later" checkitem (file+headline "playful.org" "Later") "\n\n [ ] %?\n\n" :prepend t :kill-buffer t)

	("l" "learnings" entry (file "learnings.org" :prepend t :kill-buffer t)
	 "\n\n* %i%?\n\nEntered on %U %i\n\n" :prepend t :kill-buffer t)

	("n" "note" entry (file org-default-notes-file)
	 "* %? :NOTE:\n%U\n%a\n  %i" :prepend t :kill-buffer t :clock-in t :clock-resume t)

	("b" "book" entry (file "../book/book-capture.txt" :prepend t :kill-buffer t)
	 "\n\n* %i%?\n\n" :prepend t :kill-buffer t)

	("v" "visualness and visual actions" entry (file "visual-actions.txt")
	 "\n\n\n\n*  %? %i\n \n" :prepend t :kill-buffer t)

	("e" "expression" entry (file "expression.txt")
	 "\n\n* %U\n  %i\n %?\nEntered on %U  %i\n" :prepend t :kill-buffer t)

("k" "nika" entry (file "nika-capture.txt")
	 "\n\n* %U\n %i\n %?\nEntered on %U  %i\n" :prepend t :kill-buffer t) 

	("h" "historical interest" entry (file "historical-lifestream.txt")
	 "\n\n* %U\n  %i\n %?\nEntered on %U  %i\n" :prepend t :kill-buffer t)

	("p" "pages" entry (file "~/Dropbox/writing/notationaldata/pages.txt")
	 "\n\n\n\n* %U\n\n%?\n\nEntered on %U  %i\n\n" :prepend t :kill-buffer t)

	("s" "storytelling and writing" entry (file "~/Dropbox/writing/notationaldata/writing-teacher/teaching-writing-and-storytelling.txt")
	 "\n\n\n\n* %U\n\n%?\n\nEntered on %U  %i\n\n" :prepend t :kill-buffer t)

	("F" "Funny" entry (file "~/Dropbox/writing/notationaldata/funny.txt")
	 "\n\n\n\n* %U\n\n%?\n" :prepend t :kill-buffer t)

	("V" "Vegas journal" entry (file "vegas-journal-capture.txt")
	 "\n\n\n\n* %U\n\n%?\n\nEntered on %U  %i\n\n" :prepend t :kill-buffer t)

("M" "Memorize" entry
               (file+headline (concat org-directory "org-drill-jays-decks.org")
                              "Vocabulary")
               "* Word :drill:\n%^ \n** Answer \n%^")

;; source: http://stackoverflow.com/questions/14666625/combine-org-mode-capture-and-drill-modules-to-learn-vocabulary
;; http://lists.gnu.org/archive/html/emacs-orgmode/2010-09/msg00924.html

	("f" "flowy" entry (file "flowy.org")
	 "\n\n*  %i\n %?\n" :prepend t :kill-buffer t))))
#+END_SRC

** Another org-setting, not sure what this one does exactly
#+BEGIN_SRC emacs-lisp
(defun org-ido-completing-read (&rest args)
  "Completing-read using `ido-mode' speedups if available"
  (if (and ido-mode (listp (second args)))
      (apply 'ido-completing-read args)
    (apply 'completing-read args)))
#+END_SRC

** Mobile org
Can't get this to work on my iPhone:
#+BEGIN_SRC emacs-lisp
(setq org-mobile-directory "/Users/jay/Dropbox/Apps/mobileorg/")
#+END_SRC

** Org custom functions
*** Workflowy mode
Make ~org-mode~ temporarily emulate traditional outlining keybindings
e.g. nvALT
#+BEGIN_SRC emacs-lisp
(define-minor-mode zin/org-outline-mode
  "" nil
  :lighter " OOut"
  :keymap (let ((map (make-sparse-keymap)))
            (define-key map (kbd "<return>") 'org-meta-return)
            (define-key map (kbd "<tab>") 'org-metaright)
            (define-key map (kbd "S-<tab>") 'org-metaleft)
            (define-key map (kbd "<M-return>") 'org-return)
            map))
(global-set-key "\C-co" 'zin/org-outline-mode)

(defun workflowy-mode ()
  "workflowy"
  (interactive)
  (setq org-bullets-bullet-list (quote ("• ")))
  (zin/org-outline-mode)
(org-bullets-mode)
  (boss-mode)
  (incarnadine-cursor)
  (define-key org-mode-map (kbd "DEL")
    'new-org-delete-backward-char)
  (define-key key-minor-mode-map (kbd "DEL")  'new-org-delete-backward-char)
  (insert "\n* "))

#+END_SRC

*** Check checkbox then automatically move to next item in list ([[http://superuser.com/questions/568482/org-mode-function-to-check-checkbox-and-move-to-next-in-list#][Source]]):
#+BEGIN_SRC emacs-lisp
(defun org-checkbox-next ()
  (interactive)
  (when (org-at-item-checkbox-p)
    (org-toggle-checkbox))
  (org-next-item))
#+END_SRC

*** Update parent cookie
I think this is to make parent ~DONE~ states automatically update:
#+BEGIN_SRC emacs-lisp
(defun myorg-update-parent-cookie ()
  (when (equal major-mode 'org-mode)
    (save-excursion
      (ignore-errors
	(org-back-to-heading)
	(org-update-parent-todo-statistics)))))

(defadvice org-kill-line (after fix-cookies activate)
  (myorg-update-parent-cookie))

(defadvice kill-whole-line (after fix-cookies activate)
  (myorg-update-parent-cookie))
#+END_SRC

*** checkbox-list-complete

Mark heading done when all checkboxes are checked. See [[http://thread.gmane.org/gmane.emacs.orgmode/42715][here]]. An item consists of a list with checkboxes. When all of the checkboxes are checked, the item should be considered complete and its ~TODO~ state should be automatically changed to ~DONE~. The code below does that. This version is slightly enhanced over the one in the mailing list (see [[http://thread.gmane.org/gmane.emacs.orgmode/42715/focus=42721][here]]) to reset the state back to TODO if a checkbox is unchecked. Note that the code requires that a checkbox statistics cookie (the [/] or [%] thingie in the headline - see the Checkboxes section in the manual) be present in order for it to work. Note also that it is too dumb to figure out whether the item has a ~TODO~ state in the first place: if there is a statistics cookie, a ~TODO~ / ~DONE~ state will be added willy-nilly any time that the statistics cookie is changed.

#+BEGIN_SRC emacs-lisp
(eval-after-load 'org-list
  '(add-hook 'org-checkbox-statistics-hook (function ndk/checkbox-list-complete)))

(defun ndk/checkbox-list-complete ()
  (save-excursion
    (org-back-to-heading t)
    (let ((beg (point)) end)
      (end-of-line)
      (setq end (point))
      (goto-char beg)
      (if (re-search-forward "\\[\\([0-9]*%\\)\\]\\|\\[\\([0-9]*\\)/\\([0-9]*\\)\\]" end t)
          (if (match-end 1)
              (if (equal (match-string 1) "100%")
                  ;; all done - do the state change
                  (org-todo 'done)
                (org-todo 'todo))
            (if (and (> (match-end 2) (match-beginning 2))
                     (equal (match-string 2) (match-string 3)))
                (org-todo 'done)
              (org-todo 'todo)))))))
#+END_SRC

*** Org align tables

#+BEGIN_SRC emacs-lisp
(defun my-align-all-tables ()
  (interactive)
  (org-table-map-tables 'org-table-align 'quietly))
#+END_SRC

*** Org extract link

#+BEGIN_SRC emacs-lisp
(defun my-org-extract-link ()
  "Extract the link location at point and put it on the killring."
  (interactive)
  (when (org-in-regexp org-bracket-link-regexp 1)
    (kill-new (org-link-unescape (org-match-string-no-properties 1)))))
#+END_SRC

*** Org insert link

Insert link with HTML title as default description. When using `org-insert-link'
(`C-c C-l') it might be useful to extract contents from HTML <title> tag and use
it as a default link description. Here is a way to accomplish this:

#+BEGIN_SRC emacs-lisp
(require 'mm-url) ; to include mm-url-decode-entities-string

(defun my-org-insert-link ()
  "Insert org link where default description is set to html title."
  (interactive)
  (let* ((url (read-string "URL: "))
         (title (get-html-title-from-url url)))
    (org-insert-link nil url title)))

(defun get-html-title-from-url (url)
  "Return content in <title> tag."
  (let (x1 x2 (download-buffer (url-retrieve-synchronously url)))
    (save-excursion
      (set-buffer download-buffer)
      (beginning-of-buffer)
      (setq x1 (search-forward "<title>"))
      (search-forward "</title>")
      (setq x2 (search-backward "<"))
      (mm-url-decode-entities-string (buffer-substring-no-properties x1 x2)))))
#+END_SRC

*** Org insert subtask

#+BEGIN_SRC emacs-lisp
(defun my-org-insert-sub-task ()
  (interactive)
  (let ((parent-deadline (org-get-deadline-time nil)))
    (org-goto-sibling)
    (org-insert-todo-subheading t)
    (when parent-deadline
      (org-deadline nil parent-deadline))))
#+END_SRC

*** Reschedule agenda items to today with a single command

#+BEGIN_SRC emacs-lisp
(defun org-agenda-reschedule-to-today ()
  (interactive)
  (cl-flet ((org-read-date (&rest rest) (current-time)))
	   (call-interactively 'org-agenda-schedule)))
#+END_SRC

*** Org archive done

Source: [[http://stackoverflow.com/questions/6997387/how-to-archive-all-the-done-tasks-using-a-single-command][link]]
#+BEGIN_SRC emacs-lisp
(defun my-org-archive-done-tasks ()
  (interactive)
  (org-map-entries 'org-archive-subtree "/DONE" 'file))
#+END_SRC

** Org capture
Make org-capture open in full window! :-)
#+BEGIN_SRC emacs-lisp
(add-hook 'org-capture-mode-hook 'turn-on-auto-capitalize-mode)
(add-hook 'org-capture-mode-hook 'delete-other-windows)
(add-hook 'org-capture-mode-hook 'writeroom-mode)
#+END_SRC

* Typography
** Replace smart quotes with straight quotes
Replace smart quotes with straight quotes so that spell check can recognize words with contractions like "don't" and "can't." For when I paste text in that I've copied from the web.
#+BEGIN_SRC emacs-lisp
(defun replace-smart-quotes (beg end)
  "Replace 'smart quotes' in buffer or region with ascii quotes."
  (interactive "r")
  (format-replace-strings '(("\x201C" . "\"")
                            ("\x201D" . "\"")
                            ("\x2018" . "'")
                            ("\x2019" . "'"))
                          nil beg end))
#+END_SRC

** Paste and replace quotes
Haven't used this next one:
#+BEGIN_SRC emacs-lisp
(defun paste-and-replace-quotes ()
  "Yank (paste) and replace smart quotes from the source with ascii quotes."
  (interactive)
  (clipboard-yank)
  (replace-smart-quotes (mark) (point)))
#+END_SRC

* My custom functions/settings
** Buffers
*** Buffer-stack
I use buffer-stack to navigate between buffers using ⌘-left and ⌘-right:
#+BEGIN_SRC emacs-lisp
;; (require 'buffer-stack)
#+END_SRC

GNU Emacs:
#+BEGIN_SRC emacs-lisp
(global-set-key [(s-right)] 'buffer-stack-down)
(global-set-key [(s-left)] 'buffer-stack-up)
#+END_SRC

Aquamacs:
#+BEGIN_SRC emacs-lisp
(global-set-key [(A-right)] 'buffer-stack-down)
(global-set-key [(A-left)] 'buffer-stack-up)
#+END_SRC

*** Uniqify buffers
Open new buffers without prompting me for a filename global counter to ensure
every new buffer will be unique:
#+BEGIN_SRC emacs-lisp
(defvar new-buffer-count 0)

(defun new-buffer ()
  (interactive)
  (setq new-buffer-count (+ new-buffer-count 1))
  (switch-to-buffer (concat "buffer" (int-to-string new-buffer-count)))
  (org-mode))
(global-set-key (kbd "s-T") 'new-buffer)
;; (define-key key-minor-mode-map "\s-\S-T" 'new-buffer)

(defun new-lisp-buffer ()
  (interactive)
  (setq new-buffer-count (+ new-buffer-count 1))
  (switch-to-buffer (concat "buffer" (int-to-string new-buffer-count)))
  (emacs-lisp-mode))

#+END_SRC

*** Create new buffer as org-mode subtree in current file
#+BEGIN_SRC emacs-lisp
(defun org-new-scratch-buffer ()
  (interactive)
  (insert "* oh hi there! " (format-time-string "%F %l:%M%P\n\n"))
  (org-tree-to-indirect-buffer 'current-window)
  )
#+END_SRC

*** Don't autocorrect in minibuffer
#+BEGIN_SRC emacs-lisp
(add-hook 'minibuffer-setup-hook 'conditionally-disable-abbrev)
(add-hook 'minibuffer-exit-hook (lambda () (abbrev-mode 1)))
(add-hook 'minibuffer-setup-hook (lambda ()
                                   (abbrev-mode -1)))
#+END_SRC

*** Ignore case when reading buffer and file names
#+BEGIN_SRC emacs-lisp
(setq read-buffer-completion-ignore-case t)
(setq read-file-name-completion-ignore-case t)
#+END_SRC

* Browsing
** Make URLs in comments/strings clickable

#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hooks 'goto-address-prog-mode)
#+END_SRC

** Set the default browser
#+BEGIN_SRC emacs-lisp
(setq browse-url-browser-function 'browse-url-default-macosx-browser)
#+END_SRC

* Miscellaneous/unsorted settings

#+BEGIN_SRC emacs-lisp
'(cua-enable-cua-keys (quote shift))
'(cua-highlight-region-shift-only t)
'(cua-mode nil nil (cua-base))
'(cursor-type (quote box))
'(send-mail-function (quote sendmail-send-it))
'(shift-select-mode nil)
'(transient-mark-mode t)
'(user-mail-address "dixit@aya.yale.edu")
'(global-flyspell-mode t)
'(message-send-mail-function (quote message-send-mail-with-sendmail))
'(mail-send-mail-function (quote message-send-mail-with-sendmail))
'(setq mail-user-agent 'message-user-agent)
'(global-set-key [(A-W)]  'buffer-stack-bury-and-kill)
'(ns-right-command-modifier (quote meta))
'(ns-tool-bar-display-mode (quote both) t)
'(ns-tool-bar-size-mode nil t)
'(standard-indent 3)
'(ns-function-modifier (quote meta))
(transient-mark-mode t)
(tooltip-mode -1)
(setq ns-function-modifier 'hyper)
;; open files in an existing frame instead of a new frame
(setq ns-pop-up-frames nil)
#+END_SRC

** Open everything in its right mode; use ~org-mode~ whenever possible

#+BEGIN_SRC emacs-lisp
(setq auto-mode-alist (cons '("\\.md" . org-mode) auto-mode-alist))
(setq auto-mode-alist (cons '("\\.abbrev_defs" . emacs-lisp-mode) auto-mode-alist))
;; is this the best mode for editing HTML?
(setq auto-mode-alist (cons '("\\.html" . web-mode) auto-mode-alist))
#+END_SRC

** Enable highlighting of text similar to standard word processors

#+BEGIN_SRC emacs-lisp
'(org-support-shift-select (quote always))
#+END_SRC

** Autocapitalization

#+BEGIN_SRC emacs-lisp
(require 'auto-capitalize)
(add-hook 'message-mode-hook 'turn-on-auto-capitalize-mode)
(add-hook 'org-mode-hook 'turn-on-auto-capitalize-mode)
;; (add-hook message-mode-hook turn-on-orgstruct)
#+END_SRC

** Define my default directory:

#+BEGIN_SRC emacs-lisp
(setq default-directory "~/Dropbox/writing/" )
#+END_SRC

* LaTeX
** Find LaTeX on my system

#+BEGIN_SRC emacs-lisp
(if (eq window-system 'mac)
    (add-to-list 'exec-path "/usr/local/texlive/2015/bin/universal-darwin")
  )
#+END_SRC

** XeLaTeX customisations

~org~ to LaTeX customisations, ~-shell-escape~ needed for ~minted~:
#+BEGIN_SRC emacs-lisp
(setq  ; org-export-dispatch-use-expert-ui t non-intrusive export dispatch
 org-latex-pdf-process               ; for regular export

 '("xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"
   "xelatex -shell-escape -interaction nonstopmode -output-directory %o %f"))

;; don't add extra lines to numbered lists and bulleted lists (set to nil)
(setq org-export-preserve-breaks nil) 

;; add padding to numbered lists and bulleted lists (set to to)
;; (setq org-export-preserve-breaks t) 
#+END_SRC

** load my custom latex templates

   #+BEGIN_SRC emacs-lisp
(load "/Users/jay/Dropbox/emacs/prelude/personal/new-latex-templates/blue-ruin.el") 
(load "/Users/jay/Dropbox/emacs/prelude/personal/new-latex-templates/blue-ruin_no_cover.el") 
(load "/Users/jay/Dropbox/emacs/prelude/personal/new-latex-templates/jay-latex-yosemite-setup.el") 
(require 'blue-ruin) 
(require 'blue-ruin-no-cover) 
   #+END_SRC


* Backups
Make backups:
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.saves")))
(setq
 backup-by-copying t      ; don't clobber symlinks
 delete-old-versions t
 kept-new-versions 6
 kept-old-versions 2
 version-control t)       ; use versioned backups
#+END_SRC

Make backups of files, even when they're in version control:
#+BEGIN_SRC emacs-lisp
(setq vc-make-backup-files t)
#+END_SRC

* Message mode

** Report problems with the SMTP server

#+BEGIN_SRC emacs-lisp
(setq smtpmail-debug-info t)
#+END_SRC

** Add Cc and Bcc headers to the message buffer

#+BEGIN_SRC emacs-lisp
;; (setq message-default-mail-headers "Cc: \nBcc: \n")
(setq mail-user-agent 'message-user-agent)
(setq auto-mode-alist (cons '("\\.email" . message-mode) auto-mode-alist))
#+END_SRC

** Wrapper for ~message-mail~ that prompts for the 'to' and 'subject' lines

#+BEGIN_SRC emacs-lisp
(defun mail-region (b e to subject)
  "Send the current region in an email"
  (interactive "r\nsRecipient: \nsSubject: ")
  (let ((orig-buffer (current-buffer)))
    (message-mail to subject)
    (message-goto-body)
    (insert (save-excursion (set-buffer orig-buffer)
			    (buffer-substring-no-properties b e)))
    (message-send-and-exit)))
#+END_SRC

** Forgot what this is

#+BEGIN_SRC emacs-lisp
(add-to-list 'completion-styles 'initials t)
#+END_SRC

** orgstruct mode
#+BEGIN_SRC emacs-lisp
;; orgstruct++-mode is enabled in Gnus message buffers to aid in creating structured email messages.
;; (add-hook 'message-mode-hook 'orgstruct-mode 'append)
; (add-hook 'message-mode-hook 'bbdb-define-all-aliases 'append)
(add-hook 'message-mode-hook 'turn-on-flyspell 'append)
#+END_SRC

** Remember recent email addresses

#+BEGIN_SRC emacs-lisp
(setq recent-addresses-file "~/Dropbox/emacs/prelude/recent-addresses")
(add-to-list 'load-path "~/gnulisp/recent-addresses-0.1/")
(require 'recent-addresses)
(recent-addresses-mode 1)
(add-hook 'message-setup-hook 'recent-addresses-add-first-to)

(setq mail-default-directory
   "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
(setq mail-kill-buffer-on-exit t)
(setq make-backup-files t)
(setq message-draft-headers (quote (From References Date)))
(setq message-kill-buffer-on-exit t)
(setq message-required-headers (quote (From (optional . References))))
(setq message-send-hook (quote (recent-addresses-add-headers)))
(setq message-send-hook (quote (org-mime-htmlize))) ; broke my other functions
#+END_SRC

* Pomodoro

#+BEGIN_SRC emacs-lisp
;; (require 'org-pomodoro)

(defun pomodoro-start ()
  (interactive)
  (play-sound-file "~/sounds/mgm-lion-roar-short.mp3")
  (org-pomodoro)
  )
#+END_SRC

* Reveal in finder

#+BEGIN_SRC emacs-lisp
;; (require 'reveal-in-finder)
#+END_SRC

* ~eshell~

#+BEGIN_SRC emacs-lisp
(setenv "PATH" (shell-command-to-string "source ~/.profile; echo -n $PATH"))
;; (require 'eshell-autojump)
#+END_SRC

* ~ibuffer~

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-b") 'ibuffer)
(autoload 'ibuffer "ibuffer" "List buffers." t)
#+END_SRC

Defines ~ibuffer-do-replace-string~:
#+BEGIN_SRC emacs-lisp
(define-ibuffer-op replace-string (from-str to-str)
  "Perform a `replace-string' in marked buffers."
  (:interactive
   (let* ((from-str (read-from-minibuffer "Replace string: "))
          (to-str (read-from-minibuffer (concat "Replace " from-str
                                                " with: "))))
     (list from-str to-str))
   :opstring "replaced in"
   :complex t
   :modifier-p :maybe)
  (save-window-excursion
    (switch-to-buffer buf)
    (save-excursion
      (goto-char (point-min))
      (let ((case-fold-search ibuffer-case-fold-search))
        (while (search-forward from-str nil t)
          (replace-match to-str nil t))))
    t))
#+END_SRC

* Edit with Emacs

To enable Edit with Emacs in Chrome:
#+BEGIN_SRC emacs-lisp
;; (require 'edit-server)
(edit-server-start)
#+END_SRC

* Setting variables
I should probably eventually break these out of custom-set-variables and organize them according to their function.
#+BEGIN_SRC emacs-lisp
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.

'(abbrev-all-caps nil)
                       '(ac-auto-show-menu 2.0)
                       '(ac-auto-start 4)
                       '(ac-candidate-menu-min 3)
                       '(buffer-stack-untracked (quote ("KILL" "*Compile-Log*" "*Compile-Log-Show*" "*Group*" "*Completions*" "*Messages*" "*Help*")))
                       '(flyspell-use-global-abbrev-table-p t)
                       '(global-flyspell-mode t)
                       '(mail-kill-buffer-on-exit t)
  '(abbrev-all-caps nil)
'(undo-limit 800000)
  '(user-full-name "Jay Dixit")
  '(user-mail-address "dixit@aya.yale.edu")
 '(blink-cursor-mode nil)
 '(buffer-stack-show-position nil)
 '(buffer-stack-untracked (quote    ("KILL" "*Compile-Log*" "*Compile-Log-Show*" "*Group*" "*Completions*" "*Messages*" "*Help*" "*Agenda*")))
 '(buffer-stack-untracked (quote ("KILL" "*Compile-Log*" "*Compile-Log-Show*" "*Group*" "*Completions*" "*Messages*" "*Help*" "*Archive*" "*Agenda*" "*fontification*"  "*Warnings*" "*prolific*" "*750words*" "Calendar")))
 '(calendar-latitude 40.7)
 '(case-fold-search t)
 '(ccm-recenter-at-end-of-file t)
 '(clean-buffer-list-delay-general 1)
 '(column-number-mode nil)
 '(compose-mail-user-agent-warnings nil)
 '(cua-highlight-region-shift-only t)
 '(cua-mode nil nil (cua-base))
 '(cua-mode nil)
 '(cursor-type (quote box) t)
 '(cursor-type (quote box))
 '(debug-on-error t)
 '(deft-directory "~/Dropbox/writing/notationaldata/")
 '(delete-window-preserve-buffer (quote ("*scratch*" "current-book-research.txt" "accountability.txt")))
 '(dired-clean-up-buffers-too nil)
 '(dired-details-hidden-string "")
 '(dired-kept-versions 8)
 '(display-time-mode t)
 '(edit-server-default-major-mode (quote org-mode))
 '(edit-server-new-frame t)
 '(eshell-load-hook (quote ((lambda nil (abbrev-mode -1)))))
 '(flyspell-abbrev-p t)
 '(flyspell-use-global-abbrev-table-p t)
 '(global-flyspell-mode t)
 '(grep-find-ignored-directories (quote ("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "devonthink")))
 '(grep-find-ignored-files (quote (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.pfsl" "*.dfsl" "*.p64fsl" "*.d64fsl" "*.dx64fsl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "*.pdf" "*.tex" "*.html" "*.mm" "*.js" "*.doc" "*.docx" "*.xls" "*.jpg" "*.png" "*.xlsx" "*devonthink*" "*.gif" "Icon*" "*fontification*" "*helm*" "*750words*")))
 '(grep-find-ignored-files (quote (".#*" "*.o" "*~" "*.bin" "*.lbin" "*.so" "*.a" "*.ln" "*.blg" "*.bbl" "*.elc" "*.lof" "*.glo" "*.idx" "*.lot" "*.fmt" "*.tfm" "*.class" "*.fas" "*.lib" "*.mem" "*.x86f" "*.sparcf" "*.fasl" "*.ufsl" "*.fsl" "*.dxl" "*.pfsl" "*.dfsl" "*.p64fsl" "*.d64fsl" "*.dx64fsl" "*.lo" "*.la" "*.gmo" "*.mo" "*.toc" "*.aux" "*.cp" "*.fn" "*.ky" "*.pg" "*.tp" "*.vr" "*.cps" "*.fns" "*.kys" "*.pgs" "*.tps" "*.vrs" "*.pyc" "*.pyo" "*.pdf" "*.tex" "*.html" "*.mm" "*.js" "*.doc" "*.pdf" "*.docx" "*.xls" "*.jpg" "*.png" "*.xlsx" "*devonthink*" "*.gif" "Icon*")))
 '(grep-highlight-matches (quote always))
 '(ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "pdf" "tex" "html" ".mm" "Icon*")))
 '(ido-save-directory-list-file "~/Dropbox/emacs/prelude/personal/.savefile/ido.hist")
 '(ido-use-faces t)
 '(ido-use-url-at-point t)
 '(initial-buffer-choice "~/Dropbox/writing/notationaldata/playful.org")
 '(initial-major-mode (quote org-mode))
 '(mail-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
 '(mail-kill-buffer-on-exit t)
 '(make-backup-files t)
 '(message-draft-headers (quote (From References Date)))
 '(message-kill-buffer-on-exit t)
 '(message-required-headers (quote (From (optional . References))))
 '(mml-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
 '(org-M-RET-may-split-line (quote ((item . t))))
 '(org-activate-links (quote (bracket plain radio tag date footnote)))
 '(org-agenda-jump-prefer-future t)
 '(org-agenda-skip-scheduled-if-done t)
 '(org-agenda-timegrid-use-ampm t)
 '(org-archive-location "archive/%s_archive::")
 '(org-ascii-headline-spacing (quote (1 . 1)))
 '(org-ascii-table-use-ascii-art t)
 '(org-ascii-table-use-ascii-art t)
 '(org-bullets-face-name (quote \"Courier\"))
 '(org-catch-invisible-edits (quote error))
 '(org-catch-invisible-edits (quote smart))
 '(org-clock-auto-clock-resolution t)
 '(org-clock-idle-time 5)
 '(org-clock-in-resume t)
 '(org-clock-persist-query-resume nil)
 '(org-clock-report-include-clocking-task t)
 '(org-clocktable-defaults (quote (:maxlevel 3 :lang "en" :scope file :block nil :wstart 1 :mstart 1 :tstart nil :tend nil :step nil :stepskip0 nil :fileskip0 nil :tags nil :emphasize nil :link nil :narrow 40! :indent t :formula nil :timestamp nil :level nil :tcolumns nil :formatter nil)))
 '(org-closed-string "COMPLETED:")
 '(org-ctrl-k-protect-subtree t)
 '(org-custom-properties (quote (">")))
 '(org-default-notes-file "~/Dropbox/writing/notationaldata/notes.txt")
 '(org-display-custom-times nil)
 '(org-drawers (quote ("PROPERTIES" "CLOCK" "LOGBOOK" "RESULTS" "SOURCE")))
 '(org-edit-src-content-indentation 4)
 '(org-ellipsis (quote org-warning))
 '(org-enable-fixed-width-editor nil)
 '(org-enforce-todo-checkbox-dependencies t)
 '(org-enforce-todo-dependencies t)
'(org-extend-today-until 8)
 '(org-fontify-done-headline t)
 '(org-fontify-emphasized-text t)
 '(org-footnote-define-inline t)
 '(org-footnote-section "Footnotes")
 '(org-footnote-tag-for-non-org-mode-files "Footnotes:")
 '(org-headline-done ((t (:strike-through t))))
 '(org-hide-block-startup nil)
 '(org-hide-emphasis-markers t)
 '(org-hide-leading-stars t)
 '(org-html-container-element "div")
 '(org-html-head-include-scripts nil)
 '(org-html-html5-fancy t)
 '(org-html-postamble nil)
 '(org-html-text-markup-alist (quote ((bold . "<strong>%s</strong>") (code . "<blockquote>%s</blockquote>") (italic . "<em>%s</em>") (strike-through . "<del>%s</del>") (underline . "<span class=\"underline\">%s</span>") (verbatim . "<code>%s</code>"))))
 '(org-indent-mode-turns-off-org-adapt-indentation nil)
 '(org-indent-mode-turns-on-hiding-stars nil)
 '(org-insert-mode-line-in-empty-file t)
 '(org-list-indent-offset 3)
 '(org-log-done nil)
 '(org-log-note-clock-out nil)
 '(org-log-refile nil)
 '(org-mac-Skim-highlight-selection-p t)
 '(org-mac-grab-Firefox+Vimperator-p nil)
 '(org-mac-grab-Firefox-app-p nil)
 '(org-mac-grab-Mail-app-p nil)
 '(org-mac-grab-Safari-app-p nil)
 '(org-mac-grab-Together-app-p nil)
 '(org-modules (quote    (org-bbdb org-bibtex org-gnus org-info org-annotate-file org-bullets org-invoice org-mac-iCal org-mac-link  org-panel org-secretary org-velocity org-habit org-irc org-mew org-mhe org-rmail org-vm org-wl org-w3m org-choose org-collector org-invoice)))
 '(org-n-level-faces 9)
 '(org-odd-levels-only nil)
 '(org-pomodoro-format "Pomodoro: %s")
 '(org-pomodoro-killed-sound "~/sounds/autodestructsequencearmed_ep.mp3")
 '(org-pomodoro-length 50)
 '(org-pomodoro-long-break-format "Long Break: %s")
 '(org-pomodoro-long-break-sound "~/sounds/tng-computer-programcomplete.mp3")
 '(org-pomodoro-play-ticking-sounds nil)
 '(org-pomodoro-short-break-format "Short Break: %s")
 '(org-pomodoro-short-break-sound "~/sounds/tng-picard-engage.mp3")
 '(org-pomodoro-sound "~/sounds/large-applause.mp3")
'(org-pomodoro-ticking-sound "~/Music/iTunes/iTunes Media/Music/Unknown Artist/Unknown Album/com.taptanium.thunderstorm.DreamQuest_preview.m4a") 
 '(org-provide-checkbox-statistics t)
 '(org-replace-disputed-keys nil)
 '(org-return-follows-link t)
 '(org-special-ctrl-a/e t)
 '(org-src-preserve-indentation t)
 '(org-startup-align-all-tables t)
 '(org-startup-folded nil)
 '(org-startup-indented t)
 '(org-support-shift-select (quote always))
 '(org-time-clocksum-use-effort-durations t)
 '(org-time-stamp-custom-formats (quote ("<%a %b %d>" . "<%m/%d %a %I:%M%p>"))) ; like this: "Apr 18 Fri"
 '(org-use-speed-commands t)
 '(org-yank-adjusted-subtrees t)
 '(org2blog/wp-confirm-post nil)
 '(org2blog/wp-default-categories (quote ("inspiration" "personal growth" "miscellany")))
 '(org2blog/wp-keep-new-lines t)
 '(org2blog/wp-show-post-in-browser t)
 '(org2blog/wp-use-tags-as-categories t)
 '(osx-browse-prefer-background nil)
 '(osx-browse-prefer-browser "com.google.Chrome")
 '(osx-browse-prefer-new-window t)
 '(pomodoro-break-time 10)
 '(pomodoro-work-time 50)
 '(reb-re-syntax (quote string))
 '(recentf-exclude (quote    ( ".html" ".tex" "*message*" "org-clock-save.el" "\\recent-addresses\\'" "\\ido.last\\'" "elpa" ".bmk" ".jabber" "helm" "Calendar")))
 '(recentf-max-menu-items 100)
 '(recentf-max-saved-items 999)
 '(recentf-save-file "~/Dropbox/emacs/.savefile/recentf")
 '(smex-prompt-string "I love you. ")
 '(standard-indent 3)
 '(tooltip-mode nil)
 '(tramp-default-method "ssh")
 '(undo-limit 800000)
 '(user-full-name "Jay Dixit")
 '(user-mail-address "dixit@aya.yale.edu")
 '(visual-line-mode nil t)
 '(web-mode-load-hook (quote ((lambda nil (abbrev-mode -1)))))
 ; (org-indirect-buffer-display (quote other-window))
'(completion-ignored-extensions (quote (".o" "~" ".bin" ".lbin" ".so" ".a" ".ln" ".blg" ".bbl" ".elc" ".lof" ".glo" ".idx" ".lot" ".svn/" ".hg/" ".git/" ".bzr/" "CVS/" "_darcs/" "_MTN/" ".fmt" ".tfm" ".class" ".fas" ".lib" ".mem" ".x86f" ".sparcf" ".fasl" ".ufsl" ".fsl" ".dxl" ".pfsl" ".dfsl" ".p64fsl" ".d64fsl" ".dx64fsl" ".lo" ".la" ".gmo" ".mo" ".toc" ".aux" ".cp" ".fn" ".ky" ".pg" ".tp" ".vr" ".cps" ".fns" ".kys" ".pgs" ".tps" ".vrs" ".pyc" ".pyo"  ".tex" ".mm" "Icon" ".html" ".zip")))
'(flyspell-abbrev-p t)
'(grep-find-ignored-directories (quote ("SCCS" "RCS" "CVS" "MCVS" ".svn" ".git" ".hg" ".bzr" "_MTN" "_darcs" "{arch}" "devonthink")))
'(message-kill-buffer-on-exit t)
'(message-send-mail-function (quote message-send-mail-with-sendmail))
'(mml-default-directory "~/Dropbox/writing/notationaldata/emacs-mail-message-mode-messages")
'(openwith-associations (quote (("\\.pdf\\'" "open" (file)) ("\\.mp3\\'" "xmms" (file)) ("\\.\\(?:mpe?g\\|avi\\|wmv\\)\\'" "mplayer" ("-idx" file)) ("\\.\\(?:jp?g\\|png\\)\\'" "display" (file)))))
'(org-bullets-face-name (quote \"Lucida\ Sans\ Typeriter\"))
'(org-export-latex-image-default-option "width=20.5cm")
'(org-export-time-stamp-file nil)
'(org-export-with-clocks t)
'(org-hide-block-startup nil)
'(org-html-head-include-default-style nil)
'(org-html-toplevel-hlevel 2)
'(org-indent-indentation-per-level 2)
'(org-list-allow-alphabetical t)
'(org-priority-faces nil)
'(recentf-exclude (quote (".html" ".tex" "*message*" "org-clock-save.el" "\\recent-addresses\\'" "\\ido.last\\'" "\\ido.hist\\'" "elpa" ".bmk" ".jabber" "helm")))
'(safe-local-variable-values (quote ((org-export-allow-bind-keywords . t))))
'(send-mail-function (quote sendmail-send-it))


;; end
)
#+END_SRC


* Miscellaneous
(setq vc-handled-backends ())

* Key chords

Use key chord
#+BEGIN_SRC emacs-lisp
;;(require 'key-chord)
(key-chord-mode 1)
#+END_SRC


* Indentation

Automatically indenting yanked text if in programming-modes:
#+BEGIN_SRC emacs-lisp
(defvar yank-indent-modes
  '(LaTeX-mode TeX-mode)
  "Modes in which to indent regions that are yanked (or yank-popped).
Only modes that don't derive from `prog-mode' should be listed here.")

(defvar yank-indent-blacklisted-modes
  '(python-mode slim-mode haml-mode)
  "Modes for which auto-indenting is suppressed.")

(defvar yank-advised-indent-threshold 1000
  "Threshold (# chars) over which indentation does not automatically occur.")

(defun yank-advised-indent-function (beg end)
  "Do indentation, as long as the region isn't too large."
  (if (<= (- end beg) yank-advised-indent-threshold)
      (indent-region beg end nil)))
#+END_SRC

* Color themes

#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/Dropbox/emacs/prelude/personal/sublime-themes-jay/")
#+END_SRC

* Autocomplete

#+BEGIN_SRC emacs-lisp
(require 'auto-complete)
(defun ac-ispell-get-word ()
  (format "\\(%s\\)" (car (ispell-get-word nil "\\*"))))

(defun ac-ispell-get-candidates (prefix)
  (let ((word prefix)
        (interior-frag nil))
    (lookup-words (concat (and interior-frag "*") word
                          (if (or interior-frag (null ispell-look-p))
                              "*"))
                  ispell-complete-word-dict)))

(ac-define-source ispell
  '((prefix . ac-prefix)
    (candidates . ac-ispell-get-candidates)))
#+END_SRC 

It's not a good idea to add `ac-source-ispell' to `ac-sources', I'll recommend
manual invoking.

Newer version of ~ac-define-source~ would provide us an
~ac-complete-ispell-word~.  In case it didn't:
#+BEGIN_SRC emacs-lisp
(defun ac-expand-ispell-word ()
  (interactive)
  (let ((ac-sources '(ac-source-ispell)))
    (call-interactively 'ac-start)))

(define-key global-map (kbd "s-/ s") 'ac-expand-ispell-word)

(ac-flyspell-workaround)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(load-file "~/Library/Preferences/Aquamacs Emacs/ac-ispell.el")
;; Completion words longer than 4 characters
#+END_SRC

#+BEGIN_EXAMPLE emacs-lisp
(defun buffer-background-black ()
  (interactive)
  (setq buffer-face-mode-face `(:background "black" :foreground "LightSkyBlue"))
  (buffer-face-mode 1))

;;
(defun my/enable-ac-ispell ()
  (add-to-list 'ac-sources 'ac-source-ispell))
(add-hook 'org-mode-hook 'my/enable-ac-ispell)
(add-hook 'message-mode-hook 'my/enable-ac-ispell)
;; (add-hook 'message-mode-hook 'buffer-background-black)
#+END_EXAMPLE

#+BEGIN_SRC emacs-lisp
(eval-after-load "auto-complete"
  '(progn
     (ac-ispell-setup)))
#+END_SRC 

* ~ido~

#+BEGIN_SRC emacs-lisp
(add-hook 'ido-setup-hook
	  (lambda ()
	    ;; Go straight home
	    (define-key ido-file-completion-map
	      (kbd "~")
	      (lambda ()
		(interactive)
		(if (looking-back "/")
		    (insert "~/")
		  (call-interactively 'self-insert-command))))))

(require 'ido)

(ido-mode t)

(setq ido-enable-prefix nil
      ido-enable-flex-matching t
      ido-create-new-buffer 'always
      ido-use-filename-at-point 'guess
      ido-use-virtual-buffers t
      ido-handle-duplicate-virtual-buffers 2
      ido-decorations (quote ("{" "}" " | " " | ..." "[" "]" " [No match]" " [Matched]" " [Not so readable bro]" " [Too big yo]" " [Make it so.]"))
      ido-enable-last-directory-history t
ido-enter-matching-directory nil
      ido-use-faces t
      ido-use-url-at-point t
      ido-max-prospects 10)
(setq ido-everywhere t)
#+END_SRC

Using ~ido-mode~ for ~org-refile~ (and archiving via refile):
#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
(setq confirm-nonexistent-file-or-buffer nil)
(ido-everywhere 1)
(setq ido-enable-last-directory-history t)
(setq ido-confirm-unique-completion t) ;; wait for RET, even for unique?
(setq ido-show-dot-for-dired nil) ;; put . as the first item
(setq ido-use-filename-at-point t) ;; prefer file names near point
(setq ido-use-filename-at-point 'guess)
(setq ido-file-extensions-order '(".org" ".txt" ".md"  ".emacs" ".el"))
#+END_SRC

Use full outline paths for refile targets - we file directly with IDO:
#+BEGIN_SRC emacs-lisp
(setq org-refile-use-outline-path t)

(setq org-goto-interface 'outline-path-completion
      org-goto-max-level 2)
#+END_SRC

Targets complete directly with IDO:
#+BEGIN_SRC emacs-lisp
(setq org-outline-path-complete-in-steps nil)
#+END_SRC

Allow refile to create parent tasks with confirmation:
#+BEGIN_SRC emacs-lisp
(setq org-refile-allow-creating-parent-nodes (quote confirm))
#+END_SRC

Use IDO for both buffer and file completion and ~ido-everywhere~ to ~t~:
#+BEGIN_SRC emacs-lisp
(setq org-completion-use-ido t)
(setq ido-max-directory-size 100000)
(ido-mode (quote both))
#+END_SRC

Use the current window when visiting files and buffers with IDO:
#+BEGIN_SRC emacs-lisp
(setq ido-default-file-method 'selected-window)
(setq ido-default-buffer-method 'selected-window)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (require 'ido-hacks)
#+END_SRC

Sort ido filelist by mtime instead of alphabetically.  Why would anyone want an
alphabetically sorted list? You can save keystrokes if the most recently
modified files are at the front:
#+BEGIN_SRC emacs-lisp
(add-hook 'ido-make-file-list-hook 'ido-sort-mtime)
(add-hook 'ido-make-dir-list-hook 'ido-sort-mtime)
(defun ido-sort-mtime ()
  (setq ido-temp-list
        (sort ido-temp-list
              (lambda (a b)
                (time-less-p
                 (sixth (file-attributes (concat ido-current-directory b)))
                 (sixth (file-attributes (concat ido-current-directory a)))))))
  (ido-to-end  ;; move . files to end (again)
   (delq nil (mapcar
              (lambda (x) (and (char-equal (string-to-char x) ?.) x))
              ido-temp-list))))
#+END_SRC

Add superior flex matching to ~ido-mode~:
#+BEGIN_SRC emacs-lisp
;; (require 'flx-ido)
(ido-mode 1)
(ido-everywhere 1)
(flx-ido-mode 1)
#+END_SRC

Disable IDO faces to see flx highlights:
#+BEGIN_SRC emacs-lisp
(setq ido-use-faces nil)
(setq gc-cons-threshold 20000000)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ido-bookmark-jump (bname)
  "*Switch to bookmark interactively using `ido'."
  (interactive (list (ido-completing-read "Bookmark: " (bookmark-all-names) nil t)))
  (bookmark-jump bname))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(setq
 ido-ignore-files (quote ("\\`CVS/" "\\`#" "\\`.#" "\\`\\.\\./" "\\`\\./" "html" "*.mm" "Icon*" "*gz" "*ido.hist" "*archive*" "ics")))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defun ido-goto-symbol (&optional symbol-list)
  "Refresh imenu and jump to a place in the buffer using Ido."
  (interactive)
  (unless (featurep 'imenu)
    (require 'imenu nil t))
  (cond
   ((not symbol-list)
    (let ((ido-mode ido-mode)
          (ido-enable-flex-matching
           (if (boundp 'ido-enable-flex-matching)
               ido-enable-flex-matching t))
          name-and-pos symbol-names position)
      (unless ido-mode
        (ido-mode 1)
        (setq ido-enable-flex-matching t))
      (while (progn
               (imenu--cleanup)
               (setq imenu--index-alist nil)
               (ido-goto-symbol (imenu--make-index-alist))
               (setq selected-symbol
                     (ido-completing-read "Symbol? " symbol-names))
               (string= (car imenu--rescan-item) selected-symbol)))
      (unless (and (boundp 'mark-active) mark-active)
        (push-mark nil t nil))
      (setq position (cdr (assoc selected-symbol name-and-pos)))
      (cond
       ((overlayp position)
        (goto-char (overlay-start position)))
       (t
        (goto-char position)))))
   ((listp symbol-list)
    (dolist (symbol symbol-list)
      (let (name position)
        (cond
         ((and (listp symbol) (imenu--subalist-p symbol))
          (ido-goto-symbol symbol))
         ((listp symbol)
          (setq name (car symbol))
          (setq position (cdr symbol)))
         ((stringp symbol)
          (setq name symbol)
          (setq position
                (get-text-property 1 'org-imenu-marker symbol))))
        (unless (or (null position) (null name)
                    (string= (car imenu--rescan-item) name))
          (add-to-list 'symbol-names name)
          (add-to-list 'name-and-pos (cons name position))))))))
#+END_SRC

* ~org-mime~

#+BEGIN_SRC emacs-lisp
(require 'org-mime)

(setq org-mime-default-header "")

;; put a div tag around the whole message to put it in Georgia font.
(add-hook 'org-mime-html-hook
          (lambda ()
            (goto-char (point-min))
            (insert "<div style=\"font-family:Georgia,serif\">")
            (goto-char (point-max))
            (insert "</div>")))

;; (add-hook 'org-mime-html-hook
;;          (lambda ()
;;            (org-mime-change-element-style
;;             "p" "font-family: Georgia,serif; color:#000;")))

(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "pre" (format "color: %s; background-color: %s; padding: 0.5em;"
                           "#E6E1DC" "#232323"))))


(add-hook 'org-mime-html-hook
          (lambda ()
            (org-mime-change-element-style
             "blockquote" "border-left: 2px solid gray; padding-left: 4px;")))


(add-hook 'message-mode-hook
          (lambda ()
;;;            (local-set-key "\C-c\M-o" 'org-mime-htmlize)))
(local-set-key "\M-p" 'org-mime-htmlize)))

(defun mime-send-mail ()
      "org-mime-subtree and HTMLize"
      (interactive)
(org-narrow-to-subtree)
(end-of-buffer)
(insert "\n\n---\nJay Dixit
[[http://jaydixit.com/][jaydixit.com]]
(646) 355-8001\n")
(widen)
(org-mime-subtree)
(org-mime-htmlize)
)


#+END_SRC

* Things that I don't know what they're for 

** I forgot what this is but it looks important
#+BEGIN_SRC emacs-lisp
(define-key org-mode-map
  (kbd "RET")
  (lambda()
    (interactive)
    (if (region-active-p)
        (delete-region (region-beginning)
                       (region-end))
      (call-interactively 'org-return))))
#+END_SRC

* Things that I'm not sure if I need
** Hippie expand

[[http://trey-jackson.blogspot.ca/2007/12/emacs-tip-5-hippie-expand.html][Source]]:
#+BEGIN_EXAMPLE emacs-lisp
(setq hippie-expand-try-functions-list '(try-expand-dabbrev try-expand-dabbrev-all-buffers try-expand-dabbrev-from-kill try-complete-file-name-partially try-complete-file-name try-expand-all-abbrevs try-expand-list try-expand-line try-complete-lisp-symbol-partially try-complete-lisp-symbol))
#+END_EXAMPLE 

** Calendar
Show calendar after start:
#+BEGIN_SRC emacs-lisp
(add-hook 'desktop-after-read-hook 'calendar)
#+END_SRC

* Integration with other apps
** Chrome
*** Emacs Server
Don't start the server unless we can verify that it isn't running.
#+BEGIN_SRC emacs-lisp
(require 'server)
(when (and (functionp 'server-running-p) (not (server-running-p)))
  (server-start))
#+END_SRC

*** ~osx-browse~

(require 'osx-browse)

** PDFs
*** Open PDFs in Skim
#+BEGIN_SRC emacs-lisp
;; (require 'openwith)
'(openwith-associations (quote (("\\.skim\\'" "open" (file)) ("\\.pdf\\'" "open" (file)))))
(openwith-mode t)
#+END_SRC

* Bookmarks
#+BEGIN_SRC emacs-lisp
(setq bookmark-default-file  (concat user-emacs-directory "bookmarks"))
#+END_SRC

* Custom UI modes
** Boss mode

#+BEGIN_SRC emacs-lisp
(defun  boss-mode ()
  (interactive)
  (global-hl-line-mode -1)
  (hl-line-mode -1))
#+END_SRC

* Fuzzy matching
** imenu

[[http://metasandwich.com/2013/01/19/emacs-config-youre-doing-it-wrong/][link]]

#+BEGIN_SRC emacs-lisp
(defun imenu-elisp-sections ()
  (setq imenu-prev-index-position-function nil)
  (add-to-list 'imenu-generic-expression '("Sections" "^;;;; \\(.+\\)$" 1) t))

(add-hook 'emacs-lisp-mode-hook 'imenu-elisp-sections)
;; helm-imenu
#+END_SRC

Jump to a definition in the current file. (This is awesome.)
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x C-i") 'ido-imenu)
;; (add-hook 'my-mode-hook 'imenu-add-menubar-index)
(add-hook 'org-mode-hook 'imenu-add-menubar-index)

(defun try-to-add-imenu ()
  (condition-case nil (imenu-add-to-menubar "I love you.") (error nil)))
(add-hook 'font-lock-mode-hook 'try-to-add-imenu)
#+END_SRC

** Helm
Make helm-grep search recursively by default. I want helm-grep to search not only inside the current folder, but also inside subfolders.

#+BEGIN_SRC emacs-lisp
(setq helm-M-x-always-save-history t)
(eval-after-load 'helm-grep
  '(setq helm-grep-default-command helm-grep-default-recurse-command))
#+END_SRC

* Dired

#+BEGIN_SRC emacs-lisp
  (add-hook 'dired-mode-hook 'hl-line-mode)

  (require 'dired-x)

  (setq-default dired-omit-files-p t) ; Buffer-local variable

  (setq-default dired-omit-mode t)

  (define-key dired-mode-map (kbd "C-o") 'dired-omit-mode)

  (setq delete-by-moving-to-trash t
        trash-directory "~/.Trash/emacs")

  ;; Note: If you are using Dired Omit Mode with dired+, remember to put the config of Dired Omit Mode before loading (require) dired+ since some feature of dired+ use the config from Dired Omit Mode (for example for displaying the file names).

  (defun tmtxt/dired-do-shell-mac-open ()
    (interactive)
    (save-window-excursion
      (let ((files (dired-get-marked-files nil current-prefix-arg))
            command)
        ;; the open command
        (setq command "open ")
        (dolist (file files)
          (setq command (concat command (shell-quote-argument file) " ")))
        (message command)
        ;; execute the command
        (async-shell-command command))))
  (define-key dired-mode-map (kbd "s-o") 'tmtxt/dired-do-shell-mac-open)

  (defun dired-open-current-directory-in-finder ()
    "Open the current directory in Finder"
    (interactive)
    (save-window-excursion
      (dired-do-async-shell-command
       "open .")))

  (define-key dired-mode-map (kbd "s-O") 'dired-open-current-directory-in-finder)
  (define-key dired-mode-map (kbd "s-O") 'reveal-in-finder)

  ;; https://truongtx.me/2013/04/25/dired-as-default-file-manager-5-customize-ls-command/

  ;; look at this: https://truongtx.me/2013/12/22/emacs-search-for-text-occurences-with-grep/


(require 'dired-x)
(setq-default dired-omit-files-p t) ; this is buffer-local variable 
(setq dired-omit-files "^\\.[^.]\\|\\.pdf$\\|\\.tex$") 

#+END_SRC

* Ignore / Exclude Uninteresting Things

Make Buffer-stack ignore uninteresting buffers
#+BEGIN_SRC emacs-lisp
(defun buffer-stack-filter-regexp (buffer)
  "Non-nil if buffer is in buffer-stack-tracked."
  (not (or (string-match "Help\\|minibuf\\|org2blog\\|echo\\|conversion\\|converting\\|agenda\\|server\\|Messages\\|tex\\|Output\\|temp\\|autoload\\|Customize\\|address\\|clock\\|Backtrace\\|Completions\\|grep\\|Calendar\\|archive\\||*Compile-Log*\\|tramp\\|helm\\|Alerts\\|Minibuf\\|Agenda\\|Echo\\|gnugol\\|RNC\\|ediff\\|widget\\|melpa\\|fontification\\|Helm\\|popwin\\|Custom\\|*Warnings*\\|*tags*\\|*gnugol*\\|*guide-key*\\|*scratch*\\|vc\\|booktime\\|Compiler\\|*mm*\\|nntpd\\|Gnus agent\\|dribble\\|gnus work\\|Original Article\\|Prefetch\\|Backlog\\|article copy\\|Gnorb\\|wordnik\\|log\\|accountability\\|debug\\|Re-Builder\\|spacemacs\\|Ilist" (buffer-name buffer))
	   (member buffer buffer-stack-untracked))))
(setq buffer-stack-filter 'buffer-stack-filter-regexp)
#+END_SRC

Make it so that recentf does not record the following uninteresting file types:
#+BEGIN_SRC emacs-lisp
(add-to-list 'recentf-exclude "\\ido.last\\'")
(add-to-list 'recentf-exclude "\\ido")
(add-to-list 'recentf-exclude "\\recent-addresses\\'")
(add-to-list 'recentf-exclude "org-clock-save.el")
(add-to-list 'recentf-exclude "*message*")
(add-to-list 'recentf-exclude ".tex\\")
(add-to-list 'recentf-exclude "html")
(add-to-list 'recentf-exclude "gz")
(add-to-list 'recentf-exclude "System")
(add-to-list 'recentf-exclude "Applications")
(add-to-list 'recentf-exclude "bookmark")
(add-to-list 'recentf-exclude "750words")
(add-to-list 'recentf-exclude "Calendar")
(add-to-list 'recentf-exclude ".tex")
(add-to-list 'recentf-exclude "helm")
(add-to-list 'recentf-exclude "\\ido*")
(add-to-list 'recentf-exclude "*archive")
(add-to-list 'recentf-exclude "ics")
(add-to-list 'recentf-exclude "agenda")
(add-to-list 'recentf-exclude "gnugol")
(add-to-list 'recentf-exclude "PDF")
(add-to-list 'recentf-exclude "koma")
(add-to-list 'recentf-exclude "LaTeX")
(add-to-list 'recentf-exclude "recentf")

(add-to-list 'recentf-exclude '("doc" " docx" "xls" "xlsx" "ppt" "odt" "ods" "odg" "odp"))

(add-to-list 'recentf-exclude '(".mp4" ".mpg" ".mpeg"
".avi" ".wmv" ".wav" ".mov" ".flv" ".ogm" ".ogg" ".mkv"
".png" ".gif" ".bmp" ".tif" ".jpeg" "png" ".jpg" ".doc" ".docx" ".xls" ".xlsx" ".ppt" ".odt" ".ods" ".odg" ".odp"))
#+END_SRC

* Garbage characters
#+BEGIN_SRC emacs-lisp
(defun replace-garbage-chars ()
  "Replace goofy MS and other garbage characters with latin1 equivalents."
  (interactive)
  (save-excursion                       ;save the current point
    (replace-string "΄" "\"" nil (point-min) (point-max))
    (replace-string "“" "\"" nil (point-min) (point-max))
    (replace-string "’" "'" nil (point-min) (point-max))
    (replace-string "“" "\"" nil (point-min) (point-max))
    (replace-string "—" "--" nil (point-min) (point-max)) ; multi-byte
    (replace-string "" "'" nil (point-min) (point-max))
    (replace-string "" "'" nil (point-min) (point-max))
    (replace-string "" "\"" nil (point-min) (point-max))
    (replace-string "" "\"" nil (point-min) (point-max))
    (replace-string "" "\"" nil (point-min) (point-max))
    (replace-string "" "\"" nil (point-min) (point-max))
    (replace-string "‘" "\"" nil (point-min) (point-max))
    (replace-string "’" "'" nil (point-min) (point-max))
    (replace-string "¡\"" "\"" nil (point-min) (point-max))
    (replace-string "¡­" "..." nil (point-min) (point-max))
    (replace-string "" "..." nil (point-min) (point-max))
    (replace-string "" " " nil (point-min) (point-max)) ; M-SPC
    (replace-string "" "`" nil (point-min) (point-max)) ; \221
    (replace-string "" "'" nil (point-min) (point-max)) ; \222
    (replace-string "" "``" nil (point-min) (point-max))
    (replace-string "" "'" nil (point-min) (point-max))
    (replace-string "" "*" nil (point-min) (point-max))
    (replace-string "" "--" nil (point-min) (point-max))
    (replace-string "" "--" nil (point-min) (point-max))
    (replace-string " " " " nil (point-min) (point-max)) ; M-SPC
    (replace-string "¡" "\"" nil (point-min) (point-max))
    (replace-string "´" "\"" nil (point-min) (point-max))
    (replace-string "»" "<<" nil (point-min) (point-max))
    (replace-string "Ç" "'" nil (point-min) (point-max))
    (replace-string "È" "\"" nil (point-min) (point-max))
    (replace-string "é" "e" nil (point-min) (point-max)) ;; &eacute;
    (replace-string "ó" "-" nil (point-min) (point-max))
    (replace-string "Õ" "'" nil (point-min) (point-max))
    (replace-string "Õ" "'" nil (point-min) (point-max))
    (replace-string "Ñ" "---" nil (point-min) (point-max))
    ))
#+END_SRC

* Word count
#+BEGIN_SRC emacs-lisp
(require 'wc-mode)
(setq wc-modeline-format "[Words: %tw, Chars: %tc]")
#+END_SRC

* ~ls-lisp~

I think this is correct:
#+BEGIN_SRC emacs-lisp
(require 'ls-lisp)
(setq ls-lisp-ignore-case 't)
#+END_SRC

* Load shell environment correctly
#+BEGIN_SRC emacs-lisp
(setenv "PATH" (concat (getenv "PATH") ":/usr/local/bin"))
(setq exec-path (append exec-path '("/usr/local/bin")))
#+END_SRC

* Web research functions
** Sourcing / Citing / Attributing
*** Copy link from Chrome
#+BEGIN_SRC emacs-lisp
(defun org-mac-chrome-insert-frontmost-url-with-quotes ()
  "with quotes"
  (interactive)
  (insert "\"")
  (org-mac-chrome-insert-frontmost-url)
  (insert ",\"")
  )
#+END_SRC

** Paste notes with attribution
#+BEGIN_SRC emacs-lisp
(defun web-research ()
  (interactive)
  (insert "#+BEGIN_QUOTE\n")
  (let ((p (point)))
    (insert "\n#+END_QUOTE\nSource: ")
    (org-mac-chrome-insert-frontmost-url)
    (goto-char p))
  (pasteboard-paste)
  (next-line)
  (next-line)
  (next-line)
    (insert "\n"))
#+END_SRC

** Paste notes with attribution in quotes
#+BEGIN_SRC emacs-lisp
(defun web-research-quotes ()
  (interactive)
  (insert "\"")
    (org-mac-chrome-insert-frontmost-url)
       (insert "\,\" "))
#+END_SRC

** Paste HTML
Paste HTML using proper org-mode format
Source: [[http://emacs.stackexchange.com/questions/12121/org-mode-parsing-rich-html-directly-when-pasting][source]]
#+BEGIN_SRC emacs-lisp
(defun kdm/html2org-clipboard ()
  "Convert clipboard contents from HTML to Org and then paste (yank)."
  (interactive)
  (setq cmd "osascript -e 'the clipboard as \"HTML\"' | perl -ne 'print chr foreach unpack(\"C*\",pack(\"H*\",substr($_,11,-3)))' | pandoc -f html -t json | pandoc -f json -t org")
  (kill-new (shell-command-to-string cmd))
  (yank))
#+END_SRC

* Abbrevs
** Disable autocorrect in Smex
#+BEGIN_SRC emacs-lisp
(defun conditionally-disable-abbrev ()
  ""
  (if (string-match "smex-" (format "%s" this-command))
      (abbrev-mode -1)))
#+END_SRC

* My custom functions for working with dates and times

#+BEGIN_SRC emacs-lisp
(defun org-day ()
  "foo"
  (interactive)
  (insert (format-time-string "[%H:%M]"))
  )

(defun jd-org-today ()
  "insert a new heading with today's date"
  (interactive)
(insert "\n** committed actions: ")
  (org-insert-time-stamp (current-time))
  (insert " [0%]\n")
(insert "*** TODO morning pages\n")
(insert "*** TODO meditate\n")
(insert "*** TODO work on book\n") 
(insert "*** TODO \n") 
(left-char)
  )

(defun jd-clock-in ()
  "insert a new heading with today's date, and then clock in"
  (interactive)
  (org-insert-heading ())
  (org-insert-time-stamp (current-time))
  (org-clock-in)
  (next-line)
  (next-line)
  )
#+END_SRC

* Discover mode
Show me what choices I have after I hit a prefix keybinding ([[https://github.com/mickeynp/discover.el][mickeynp/discover.el]]):
#+BEGIN_SRC emacs-lisp
;; (require 'discover)

(discover-add-context-menu
 :context-menu (assq 'isearch discover-context-menus)
 :mode nil
 :mode-hook nil
 :bind "C-c s")

(global-discover-mode 1)

(load "makey")

(discover-add-context-menu
 :context-menu '(isearch
              (description "Isearch, occur and highlighting")
              (lisp-switches
               ("-cf" "Case should fold search" case-fold-search t nil))
              (lisp-arguments
               ("=l" "context lines to show (occur)"
                "list-matching-lines-default-context-lines"
                (lambda (dummy) (interactive) (read-number "Number of context lines to show: "))))
              (actions
               ("Isearch"
                ("_" "isearch forward symbol" isearch-forward-symbol)
                ("w" "isearch forward word" isearch-forward-word))
               ("Occur"
                ("o" "occur" occur))
               ("More"
                ("h" "highlighters ..." makey-key-mode-popup-isearch-highlight))))
 :bind "M-s")
#+END_SRC

* Prose editing settings
** Tab Completion for Prose
# haven't tried this yet

Source: ([[http://endlessparentheses.com/tab-completion-for-prose.html][source]])
#+BEGIN_EXAMPLE emacs-lisp
(setq ac-auto-start 3)
(setq company-minimum-prefix-length 3)

(defun endless/config-prose-completion ()
  "Make auto-complete less agressive in this buffer."
  (setq-local company-minimum-prefix-length 6)
  (setq-local ac-auto-start 6))

(add-hook 'org-mode-hook
  #'endless/config-prose-completion)
#+END_EXAMPLE 
** Capitalization
*** Intelligently change punctuation of sentences when I change the capitalization
([[http://endlessparentheses.com/super-smart-capitalization.html][source]]):
#+BEGIN_SRC emacs-lisp
(defun endless/convert-punctuation (rg rp)
  "Look for regexp RG around point, and replace with RP.
Only applies to text-mode."
  (let ((f "\\(%s\\)\\(%s\\)")
        (space "?:[[:blank:]\n\r]*"))
    ;; We obviously don't want to do this in prog-mode.
    (if (and (derived-mode-p 'text-mode)
             (or (looking-at (format f space rg))
                 (looking-back (format f rg space))))
        (replace-match rp nil nil nil 1))))

(defun endless/capitalize ()
  "Capitalize region or word.
Also converts commas to full stops, and kills
extraneous space at beginning of line."
  (interactive)
  (endless/convert-punctuation "," ".")
  (if (use-region-p)
      (call-interactively 'capitalize-region)
    ;; A single space at the start of a line:
    (when (looking-at "^\\s-\\b")
      ;; get rid of it!
      (delete-char 1))
    (call-interactively 'capitalize-word)))

(defun endless/downcase ()
  "Downcase region or word.
Also converts full stops to commas."
  (interactive)
  (endless/convert-punctuation "\\." ",")
  (if (use-region-p)
      (call-interactively 'downcase-region)
    (call-interactively 'downcase-word)))

(defun endless/upcase ()
  "Upcase region or word."
  (interactive)
  (if (use-region-p)
      (call-interactively 'upcase-region)
    (call-interactively 'upcase-word)))

(global-set-key "\M-c" 'endless/capitalize)
(global-set-key "\M-l" 'endless/downcase)
(global-set-key "\M-u" 'endless/upcase)

(defun endless/upgrade ()
  "Update all packages, no questions asked."
  (interactive)
  (save-window-excursion
    (list-packages)
    (package-menu-mark-upgrades)
    (package-menu-execute 'no-query)))
#+END_SRC

** Reconfigure shift-select
For prose editing tasks, make m-s-right and m-s-left behave as they do in
traditional word processors, highlighting whole words at a time:
#+BEGIN_SRC emacs-lisp
(defvar lawlist-movement-syntax-table
  (let ((st (make-syntax-table)))
    ;; ` default = punctuation
    ;;  default = punctuation
    ;; , default = punctuation
    ;; ; default = punctuation
    (modify-syntax-entry ?{ "." st)  ;; { = punctuation
    (modify-syntax-entry ?} "." st)  ;; } = punctuation
    (modify-syntax-entry ?\" "." st) ;; " = punctuation
    (modify-syntax-entry ?\\ "_" st) ;; \ = symbol
    (modify-syntax-entry ?\$ "_" st) ;; $ = symbol
    (modify-syntax-entry ?\% "_" st) ;; % = symbol
    st)
  "Syntax table used while executing custom movement functions.")

(defun lawlist-forward-entity ()
"http://stackoverflow.com/q/18675201/2112489"
(interactive "^")
  (with-syntax-table lawlist-movement-syntax-table
    (cond
      ((eolp)
        (forward-char))
      ((and
          (save-excursion (< 0 (skip-chars-forward " \t")))
          (not (region-active-p)))
        (skip-chars-forward " \t"))
      ((and
          (save-excursion (< 0 (skip-chars-forward " \t")))
          (region-active-p))
        (skip-chars-forward " \t")
        (cond
          ((save-excursion (< 0 (skip-syntax-forward "w")))
            (skip-syntax-forward "w"))
          ((save-excursion (< 0 (skip-syntax-forward ".")))
            (skip-syntax-forward "."))
          ((save-excursion (< 0 (skip-syntax-forward "_()")))
            (skip-syntax-forward "_()"))))
      ((save-excursion (< 0 (skip-syntax-forward "w")))
        (skip-syntax-forward "w")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t")))
      ((save-excursion (< 0 (skip-syntax-forward ".")))
        (skip-syntax-forward ".")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t")))
      ((save-excursion (< 0 (skip-syntax-forward "_()")))
        (skip-syntax-forward "_()")
        (if (and
              (not (region-active-p))
              (save-excursion (< 0 (skip-chars-forward " \t"))))
          (skip-chars-forward " \t"))))))

(defun lawlist-backward-entity ()
"http://stackoverflow.com/q/18675201/2112489"
(interactive "^")
  (with-syntax-table lawlist-movement-syntax-table
    (cond
      ((bolp)
        (backward-char))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (bolp))
        (skip-chars-backward " \t"))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward "w")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "w"))
      ((save-excursion (> 0 (skip-syntax-backward "w")))
        (skip-syntax-backward "w"))
      ((save-excursion (> 0 (skip-syntax-backward ".")))
        (skip-syntax-backward "."))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward ".")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "."))
      ((save-excursion (> 0 (skip-syntax-backward "_()")))
        (skip-syntax-backward "_()"))
      ((save-excursion (> 0 (skip-chars-backward " \t")) (> 0 (skip-syntax-backward "_()")))
        (skip-chars-backward " \t")
        (skip-syntax-backward "_()")))))

(define-key global-map [M-s-right] 'lawlist-forward-entity)
(define-key global-map [M-s-left] 'lawlist-backward-entity)
#+END_SRC

* Prose editing functions
** Working with windows
Transpose windows, useful:
#+BEGIN_SRC emacs-lisp
(defun transpose-windows (arg)
  "Transpose the buffers shown in two windows."
  (interactive "p")
  (let ((selector (if (>= arg 0) 'next-window 'previous-window)))
    (while (/= arg 0)
      (let ((this-win (window-buffer))
	    (next-win (window-buffer (funcall selector))))
	(set-window-buffer (selected-window) next-win)
	(set-window-buffer (funcall selector) this-win)
	(select-window (funcall selector)))
      (setq arg (if (plusp arg) (1- arg) (1+ arg))))))
#+END_SRC

** Move region to other window, very useful:
#+BEGIN_SRC emacs-lisp
(defun move-region-to-other-window (start end)
  "Move selected text to other window"
  (interactive "r")
  (if (use-region-p)
      (let ((count (count-words-region start end)))
        (save-excursion
          (kill-region start end)
          (other-window 1)
          (yank)
          (newline))
        (other-window -1)
        (message "Moved %s words" count))
    (message "No region selected")))
#+END_SRC

** Remove hyperlink
A useful function: remove a hyperlink but leave the link description:
#+BEGIN_SRC emacs-lisp
(defun remove-link ()
    "Replace an org link by its description or if empty its address"
  (interactive)
  (if (org-in-regexp org-bracket-link-regexp 1)
      (let ((remove (list (match-beginning 0) (match-end 0)))
        (description (if (match-end 3)
                 (org-match-string-no-properties 3)
                 (org-match-string-no-properties 1))))
    (apply 'delete-region remove)
    (insert description))))
#+END_SRC

** Refile region
Refile highlighted to a particular heading ([[http://stackoverflow.com/questions/25256304/in-emacs-org-mode-how-to-refile-highlighted-text-under-an-org-heading/25262538?iemail=1&noredirect=1#25262538][Source]]):
#+BEGIN_SRC emacs-lisp
(defvar org-refile-region-format "\n%s\n")

(defvar org-refile-region-position 'top
  "Where to refile a region. Use 'bottom to refile at the
end of the subtree. ")

(defun org-refile-region (beg end copy)
  "Refile the active region.
If no region is active, refile the current paragraph.
With prefix arg C-u, copy region instad of killing it."
  (interactive "r\nP")
  ;; mark paragraph if no region is set
  (unless (use-region-p)
    (setq beg (save-excursion
                (backward-paragraph)
                (skip-chars-forward "\n\t ")
                (point))
          end (save-excursion
                (forward-paragraph)
                (skip-chars-backward "\n\t ")
                (point))))
  (let* ((target (save-excursion (org-refile-get-location)))
         (file (nth 1 target))
         (pos (nth 3 target))
         (text (buffer-substring-no-properties beg end)))
    (unless copy (kill-region beg end))
    (deactivate-mark)
    (with-current-buffer (find-file-noselect file)
      (save-excursion
        (goto-char pos)
        (if (eql refile-region-position 'bottom)
            (org-end-of-subtree)
          (org-end-of-meta-data-and-drawers))
        (insert (format refile-region-format text))))))


(defun my-org-files-list ()
  (mapcar (lambda (buffer)
            (buffer-file-name buffer))
          (org-buffer-list 'files t)))


(setq org-refile-targets '((my-org-files-list :maxlevel . 4)))
#+END_SRC

* Working with files
** Reopen last closed file, very useful:
#+BEGIN_SRC emacs-lisp
(defun visit-most-recent-file ()
  "Visits the most recently open file in `recentf-list' that is not already being visited."
  (interactive)
  (let ((buffer-file-name-list (mapcar 'buffer-file-name (buffer-list)))
	most-recent-filename)
    (dolist (filename recentf-list)
      (unless (memq filename buffer-file-name-list)
	(setq most-recent-filename filename)
	(return)))
    (find-file most-recent-filename)))
#+END_SRC

** Copy path
Useful for working with files and references:
#+BEGIN_SRC emacs-lisp
(defun path-copy-full-path-to-clipboard ()
  "Copy the full current filename and path to the clipboard"
  (interactive)
  (let ((filename (if (equal major-mode 'dired-mode)
                      default-directory
                    (buffer-file-name))))
    (when filename
      (with-temp-buffer
        (insert filename)
        (clipboard-kill-region (point-min) (point-max)))
      (message filename))))
#+END_SRC

** Rename file and buffer
Source: [[http://steve.yegge.googlepages.com/my-dot-emacs-file][source]]
#+BEGIN_SRC emacs-lisp
(defun prelude-rename-file-and-buffer (new-name)
  "Renames both current buffer and file it's visiting to NEW-NAME."
  (interactive "sNew name: ")
  (let ((name (buffer-name))
	(filename (buffer-file-name)))
    (if (not filename)
	(message "Buffer '%s' is not visiting a file!" name)
      (if (get-buffer new-name)
	  (message "A buffer named '%s' already exists!" new-name)
	(progn
	  (rename-file name new-name 1)
	  (rename-buffer new-name)
	  (set-visited-file-name new-name)
	  (set-buffer-modified-p nil))))))
#+END_SRC

** Recent files
Enable recent files using Ido mode COMMAND-R (then RIGHT-ARROW to browse)
~xsteve-ido-choose-from-recentf~ allows me to switch to any recently opened
file.  The nice thing, using that function is, that it does not matter, if I
have the buffer already opened, or if the file must be opened now.  With that
function I have a persistent buffer list available.

*** Ido recent files
#+BEGIN_SRC emacs-lisp
(defun xsteve-ido-choose-from-recentf ()
  "Use ido to select a recently opened file from the 'recentf-list'"
  (interactive)
  (let ((home (expand-file-name (getenv "HOME"))))
    (find-file
     (ido-completing-read ""
			  (mapcar (lambda (path)
				    (replace-regexp-in-string home "~" path))
				  recentf-list)
			  nil t))))
#+END_SRC

*** Enable recent files without using Ido mode via C-x C-r:
#+BEGIN_SRC emacs-lisp
(recentf-mode 1) ; recentf

(defun recentf-open-files-compl ()
  (interactive)
  (let* ((all-files recentf-list)
	 (tocpl (mapcar (function
			 (lambda (x) (cons (file-name-nondirectory x) x))) all-files))
	 (prompt (append '("File name: ") tocpl))
	 (fname (completing-read (car prompt) (cdr prompt) nil nil)))
    (find-file (cdr (assoc-string fname tocpl)))))

(global-set-key [(control x)(control r)] 'recentf-open-files-compl)
#+END_SRC

* Extra functionality
** Google search
Enable Google search:
#+BEGIN_SRC emacs-lisp
;; (require 'engine-mode)
;; (engine-mode t)

;; (defengine google  "http://www.google.com/search?ie=utf-8&oe=utf-8&q=%s"  "g")
#+END_SRC

** Google search through Gnugol
#+BEGIN_SRC emacs-lisp
;; (require 'gnugol)
#+END_SRC
* Things I want to learn
** Need to add "cleanup buffer safe" here from whattheemacsd.com
#+BEGIN_SRC emacs-lisp
(defun cleanup-buffer ()
  "Perform a bunch of operations on the whitespace content of a buffer.
Including indent-buffer, which should not be called automatically on save."
  (interactive)
  (cleanup-buffer-safe)
  (indent-region (point-min) (point-max)))

(global-set-key (kbd "C-c n") 'cleanup-buffer)
#+END_SRC

** Point stack
For popping around the buffer. I need to review how this works again.
#+BEGIN_SRC emacs-lisp
;; (require 'point-stack)
#+END_SRC

** SMEX
- ~smex-describe-function~
- ~smex-find-function~
- ~smex-where-is~

** BBDB contacts database (not currently using this)

#+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "~/Dropbox/elisp/bbdb/lisp")
;; (require 'bbdb) ;; (3)
;; (bbdb-initialize 'gnus 'message)   ;; (4)
;; (setq bbdb-north-american-phone-numbers-p nil)   ;; (5)
#+END_SRC

* Keybindings

Best guide to [[http://www.nongnu.org/emacs-tiny-tools/keybindings/][keybindings]].

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-]") 'outline-next-visible-heading)
(global-set-key (kbd "M-[") 'outline-previous-visible-heading)
(global-set-key (kbd "M-1") 'auto-capitalize-mode)
;; (global-set-key (kbd "s-u") 'dired-single)


(define-key global-map (kbd "<C-wheel-up>") (lambda ()
                                              (interactive)
                                              (scroll-up-command)))
(define-key global-map (kbd "<C-wheel-down>") (lambda ()
                                               (interactive)
                                               (scroll-down-command)))

(global-set-key "\C-f" 'forward-word)
(global-set-key "\C-b" 'backward-word)

(global-set-key '[(f5)] 'point-stack-push)
(global-set-key '[(f6)] 'point-stack-pop)
(global-set-key '[(f7)] 'point-stack-forward-stack-pop)
(global-set-key '[(f8)] 'search-open-buffers)
#+END_SRC

Make ^H delete rather than help:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-h") 'delete-backward-char)
#+END_SRC

Redefine help shortcut:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-h") 'help-command)
#+END_SRC

#+BEGIN_SRC emacs-lisp
;; (define-key key-minor-mode-map (kbd "C-x C-f") 'helm-find-files)
;; (define-key key-minor-mode-map (kbd "C-x C-f") 'ido-find-file-in-dir)
(global-set-key (kbd "C-c h") 'helm-mini)
#+END_SRC

~helm~ keybindings:
- [C-n] Move to next helm suggestion.
- [C-p] Move to previous helm suggestion.

#+BEGIN_SRC emacs-lisp
(cl-dolist (map '(message-mode-map orgstruct-mode-map))
  (cl-dolist (key '("<M-S-left>" "<M-S-right>" "<M-S-up>" "<M-S-down>" "<M-left>" "<M-right>" "<M-up>" "<M-down>"))
    (define-key (eval map) (kbd key) nil)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(global-set-key "\C-ce" 'eval-buffer)
(global-set-key "\C-cr" 'eval-region)
(global-set-key (kbd "`") 'flyspell-auto-correct-word)
(global-set-key (kbd "M-`") 'other-frame)
(global-set-key (kbd "s-z") 'undo)
(global-set-key (kbd "s-y") 'redo)
#+END_SRC

** OSX ⌘ key bindings
Recognize the ⌘ key in both GNU Emacs and Aquamacs as hyper key:
#+BEGIN_SRC emacs-lisp
(defvar gnuemacs-flag (string-match "GNU" (emacs-version)))
(defvar aquamacs-flag (string-match "Aquamacs" (emacs-version)))

(defun define-hyper-key (key fun)
  (cond
   (aquamacs-flag
    (define-key osx-key-mode-map (kbd (concat "A-" key)) fun))
   (gnuemacs-flag
    (define-key key-minor-mode-map (kbd (concat "s-" key)) fun))))
#+END_SRC

*** mkhyper - shared Aquamacs / GNU Emacs keybindings:
#+BEGIN_SRC emacs-lisp
(define-hyper-key "h" 'replace-string)
(define-hyper-key "i" 'org-mac-chrome-insert-frontmost-url)
(define-hyper-key "\\" 'visit-most-recent-file)
(define-hyper-key "]" 'visit-most-recent-file)
;; (define-hyper-key "f" 'isearch-forward)
;; (define-hyper-key "F" 'pasteboard-search-in-current-buffer) 
(define-hyper-key "r" 'xsteve-ido-choose-from-recentf)
(define-hyper-key "R" 'helm-projectile-recentf)
;; (define-hyper-key "r" 'helm-mini)
;; (define-hyper-key "r" 'recentf-open-files-compl)
(define-hyper-key "r" 'fasd-find-file)
(define-hyper-key "t" 'new-buffer)
(define-hyper-key "T" 'org-new-scratch-buffer)
(define-hyper-key "g" 'isearch-repeat-forward)
(define-hyper-key "k" 'ido-kill-buffer)
(define-hyper-key "K" 'org-mac-chrome-insert-frontmost-url-with-quotes)
(define-hyper-key "d" 'org-todo)
(define-hyper-key "L" 'org-mac-chrome-insert-frontmost-url)
(define-hyper-key "S" 'org-mac-skim-insert-page)
(define-hyper-key "b" 'org-narrow-to-subtree)
(define-hyper-key "a" 'mark-whole-buffer) ; select all
(define-hyper-key "w" 'delete-window) ; close
(define-hyper-key "`" 'other-window)
(define-hyper-key "s" 'jay/save-some-buffers ) ; save all
#+END_SRC

Key bindings I don't use much and should remember to learn:
#+BEGIN_SRC emacs-lisp
(define-hyper-key "4" 'clone-indirect-buffer-other-window)
(define-hyper-key "5" 'point-stack-push)
(define-hyper-key "6" 'point-stack-pop)
(define-hyper-key "7" 'point-stack-forward-stack-pop)
(define-hyper-key "8" 'search-open-buffers)
(define-hyper-key "B" 'clone-indirect-buffer-other-window)
(define-hyper-key "o" 'eval-buffer)
(define-hyper-key "F" 'pasteboard-search-in-current-buffer)
(define-hyper-key "(" 'org-velocity)
(define-hyper-key "[" 'org-backward-heading-same-level)
(define-hyper-key "]" 'org-forward-heading-same-level)

(define-hyper-key "m a" 'org-agenda)
(define-hyper-key "m j" 'helm-imenu-anywhere)
(define-hyper-key ";" 'ido-goto-symbol)
(define-hyper-key "D" 'diredp-dired-recent-dirs)
#+END_SRC

mkprefix: Key bindings for my own custom functions, using ⌘-m as a prefix:
#+BEGIN_SRC emacs-lisp
(define-hyper-key "m cy" 'cyberpunk-jay)
(define-hyper-key "m cl" 'cyberpunk-large)
(define-hyper-key "m zb" 'zenburn)
(define-hyper-key "m le" 'leuven)
;; (define-hyper-key "m cl" 'cyberpunk-large)

(define-hyper-key "m dd" 'delete-duplicate-lines-keep-blanks) 

(define-hyper-key "m cw" 'cyberpunk-writeroom)
(define-hyper-key "m wb" 'whiteboard)
(define-hyper-key "m sl" 'solarized-light)
(define-hyper-key "m sd" 'solarized-dark)
(define-hyper-key "m ri" 'ritchie)
(define-hyper-key "m sp" 'spolsky)
(define-hyper-key "m wr" 'writeroom-mode)
(define-hyper-key "m wf" 'workflowy-mode)
(define-hyper-key "m st" 'small-type)
(define-hyper-key "m mp" 'morning-pages)
(define-hyper-key "m rf" 'prelude-rename-file-and-buffer)
(define-hyper-key "m lt" 'large-type)
(define-hyper-key "m mt" 'medium-type)
(define-hyper-key "m df" 'prelude-delete-file-and-buffer)


;; accountability
(define-hyper-key "m td" 'jd-org-today)
(define-hyper-key "m ek" 'erika-send-email-styled)

(defun keybinding-read-and-insert (key)
  (interactive "kKey: ")
(insert "(define-key key-minor-mode-map ")
        (insert (format "(kbd \"%s\")" (key-description key)))
        (insert " '")
(save-excursion (insert ")")
                ))

(define-hyper-key "m kb" 'keybinding-read-and-insert)

#+END_SRC

* Searching for things
** isearch
*** isearch settings
#+BEGIN_SRC emacs-lisp
(defun my-isearch-word-at-point ()
  (interactive)
  (call-interactively 'isearch-forward-regexp))

(defun my-isearch-yank-word-hook ()
  (when (equal this-command 'my-isearch-word-at-point)
    (let ((string (concat "\\<"
			  (buffer-substring-no-properties
			   (progn (skip-syntax-backward "w_") (point))
			   (progn (skip-syntax-forward "w_") (point)))
			  "\\>")))
      (if (and isearch-case-fold-search
	       (eq 'not-yanks search-upper-case))
	  (setq string (downcase string)))
      (setq isearch-string string
	    isearch-message
	    (concat isearch-message
		    (mapconcat 'isearch-text-char-description
			       string ""))
	    isearch-yank-flag t)
      (isearch-search-and-update))))

(add-hook 'isearch-mode-hook 'my-isearch-yank-word-hook)

;; (global-set-key "\C-cw" 'my-isearch-word-at-point)
#+END_SRC

*** search all open buffers
I know that string is in my Emacs somewhere!
#+BEGIN_SRC emacs-lisp
(require 'cl)


(defcustom search-open-buffers-ignored-files (list (rx-to-string '(and bos (or ".bash_history" "TAGS" "Preferences" "Backtrace" "Messages" "Custom" "scratch") eos)))
  "Files to ignore when searching buffers via \\[search-open-buffers]."
  :type 'editable-list)

(require 'grep)

(defun search-open-buffers (regexp prefix)
  "Searches file-visiting buffers for occurence of REGEXP. With
prefix > 1 (i.e., if you type C-u \\[search-open-buffers]),
searches all buffers."
  (interactive (list (grep-read-regexp)
                     current-prefix-arg))
  (message "Regexp is %s; prefix is %s" regexp prefix)
  (multi-occur
   (if (member prefix '(4 (4)))
       (buffer-list)
     (remove-if
      (lambda (b) (some (lambda (rx) (string-match rx  (file-name-nondirectory (buffer-file-name b)))) search-open-buffers-ignored-files))
      (remove-if-not 'buffer-file-name (buffer-list))))

   regexp))
#+END_SRC

*** Position of the Cursor after Searching

Note that when you type ‘C-r’, isearch goes backwards. When you search
backwards, find something, and then end the search, for example by hitting
‘RET’, point is at the beginning of the string you searched. When you search
forwards, point is not necessarily at the end of the string you were searching
for, but only after the last character that you typed – bad usability! That
means that you cannot predict point based on the string you are searching for
(and thinking about). You must predict point based on the numbers of characters
you typed. Here is how to change that in your InitFile, courtesy of
AdrianKubala:

#+BEGIN_SRC emacs-lisp
(add-hook 'isearch-mode-end-hook 'my-goto-match-beginning)

(defun my-goto-match-beginning ()
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end)))

(defadvice isearch-exit (after my-goto-match-beginning activate)
  "Go to beginning of match."
  (when (and isearch-forward isearch-other-end)
    (goto-char isearch-other-end))
(recenter-top-bottom)
)

(defun isearch-from-buffer-start ()
  (interactive)
  (push-mark)
  (goto-char (point-min))
  (isearch-forward))
#+END_SRC

** Helm

#+BEGIN_SRC emacs-lisp
(require 'helm-config)
(helm-mode t)
(helm-adaptative-mode t)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'helm-swoop)
; (global-set-key (kbd "M-i") (lambda() (interactive) (helm-swoop :$query nil)))

(setq helm-swoop-pre-input-function
      (lambda () nil))
#+END_SRC

When doing isearch, hand the word over to ~helm-swoop~:
#+BEGIN_SRC emacs-lisp
(define-key isearch-mode-map (kbd "M-i") 'helm-swoop-from-isearch)
#+END_SRC

From ~helm-swoop~ to ~helm-multi-swoop-all~:
#+BEGIN_SRC emacs-lisp
(define-key helm-swoop-map (kbd "M-i") 'helm-multi-swoop-all-from-helm-swoop)
#+END_SRC

When doing evil-search, hand the word over to ~helm-swoop~:
#+BEGIN_SRC emacs-lisp
;; (define-key evil-motion-state-map (kbd "M-i") 'helm-swoop-from-evil-search)
#+END_SRC

Save buffer when ~helm-multi-swoop-edit~ completes:
#+BEGIN_SRC emacs-lisp
(setq helm-multi-swoop-edit-save t)
#+END_SRC

If this value is ~t~, split window inside the current window:
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-split-with-multiple-windows nil)
#+END_SRC

Split direcion. ~split-window-vertically~ or ~split-window-horizontally~:
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-split-direction 'split-window-vertically)
#+END_SRC

If ~nil~, you can slightly boost invoke speed in exchange for text color:
#+BEGIN_SRC emacs-lisp
(setq helm-swoop-speed-or-color nil)
#+END_SRC

#+BEGIN_SRC emacs-lisp
(define-key helm-map (kbd "<tab>") 'helm-execute-persistent-action) ; rebihnd tab to do persistent action
(define-key helm-map (kbd "C-i") 'helm-execute-persistent-action) ; make TAB works in terminal
(define-key helm-map (kbd "C-z")  'helm-select-action) ; list actions using C-z
#+END_SRC 

#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "C-x r l") #'helm-filtered-bookmarks)
(global-set-key (kbd "M-y")     #'helm-show-kill-ring)
(global-set-key (kbd "M-s /")   #'helm-multi-swoop)

(setq helm-ff-transformer-show-only-basename nil
      helm-adaptive-history-file             "~/.emacs.d/data/helm-history"
      helm-yank-symbol-first                 t
      helm-move-to-line-cycle-in-source      t
      helm-buffers-fuzzy-matching            t
      helm-ff-auto-update-initial-value      t)

(autoload 'helm-descbinds      "helm-descbinds" t)
(autoload 'helm-eshell-history "helm-eshell"    t)
(autoload 'helm-esh-pcomplete  "helm-eshell"    t)

(global-set-key (kbd "M-h a")    #'helm-apropos)
(global-set-key (kbd "M-h i")    #'helm-info-emacs)
(global-set-key (kbd "M-h b")    #'helm-descbinds)

(add-hook 'eshell-mode-hook
          #'(lambda ()
              (define-key eshell-mode-map (kbd "TAB")     #'helm-esh-pcomplete)
              (define-key eshell-mode-map (kbd "C-c C-l") #'helm-eshell-history)))


(global-set-key (kbd "C-x c!")   #'helm-calcul-expression)
(global-set-key (kbd "C-x c:")   #'helm-eval-expression-with-eldoc)
(define-key helm-map (kbd "M-o") #'helm-previous-source)

(global-set-key (kbd "M-s s")   #'helm-again)
#+END_SRC

** helm projectile

   #+BEGIN_EXAMPLE emacs-lisp
(require 'helm-projectile)
(setq helm-projectile-sources-list (cons 'helm-source-projectile-files-list
(remove 'helm-source-projectile-files-list helm-projectile-sources-list)))
(helm-projectile-on)

(define-key projectile-mode-map (kbd "C-c p /")
  #'(lambda ()
      (interactive)
      (helm-ag (projectile-project-root))))
   #+END_EXAMPLE

* these seem to need to go at the end

** Palimpsest - best ever
#+BEGIN_SRC emacs-lisp
;; (require 'palimpsest)
(palimpsest-mode 1)
#+END_SRC

C-C C-R to move text to the bottom of the buffer

** Make block quotes appear nicely in buffer, displaying > instead of :

This doesn't seem to be working.

http://thread.gmane.org/gmane.emacs.orgmode/64980/focus=65987
#+BEGIN_SRC emacs-lisp
(font-lock-add-keywords
 'org-mode '(("^\\(:+\\) " 1 (compose-region (match-beginning 1) (match-end 1) ?> ) nil)))
#+END_SRC

* replace word
#+BEGIN_SRC emacs-lisp
(defun replace-word (tosearch toreplace)
  (interactive "sSearch for word: \nsReplace with: ")
  (save-excursion
    (goto-char (point-min))
    (let ((case-fold-search nil)
          (count 0))
      (while (re-search-forward (concat "\\b" tosearch "\\b") nil t)
        (setq count (1+ count))
        (replace-match toreplace 'fixedcase 'literal))
      (message "Replaced %s match(es)" count))))
#+END_SRC

* experimenting
#+BEGIN_SRC emacs-lisp
(setq auto-capitalize-predicate
      (lambda () 
        (save-match-data
          (not (looking-back "\\([Ee]\\.g\\|[Uu]\\.S\\|[Vv]S\\|[Ii]\\.e\\|\\.\\.\\)\\.[^.]*" (- (point) 20))))))
#+END_SRC 



** Load my LaTeX files

;; (load "~/Dropbox/elisp/latex.el")
(load "~/Dropbox/elisp/signal-flare.el")
(load "~/Dropbox/elisp/signal-flare-wide.el")
;; (load "~/Dropbox/elisp/signal-flare-wide-different-image.el")
(load "~/Dropbox/elisp/jay-dixit-latex.el")
(load "~/Dropbox/elisp/signal-flare-smaller-fonts.el")
*
magit

#+BEGIN_SRC emacs-lisp
(setq magit-last-seen-setup-instructions "1.4.0")
#+END_SRC


* startup
#+BEGIN_SRC emacs-lisp
;; (load-theme 'leuven)
#+END_SRC

* Tell isearch that curly apostrophes are the same as straight ones
Source: [[http://endlessparentheses.com/ispell-and-apostrophes.html][Ispell and Apostrophes in Emacs]]

#+BEGIN_SRC emacs-lisp
 ;;; Tell ispell.el that ’ can be part of a word.
(setq ispell-local-dictionary-alist
      `((nil "[[:alpha:]]" "[^[:alpha:]]"
             "['\x2019]" nil ("-B") nil utf-8)))

;;; Don't send ’ to the subprocess.
(defun endless/replace-apostrophe (args)
  (cons (replace-regexp-in-string
         "’" "'" (car args))
        (cdr args)))
(advice-add #'ispell-send-string :filter-args
            #'endless/replace-apostrophe)

;;; Convert ' back to ’ from the subprocess.
(defun endless/replace-quote (args)
  (if (not (derived-mode-p 'org-mode))
      args
    (cons (replace-regexp-in-string
           "'" "’" (car args))
          (cdr args))))
(advice-add #'ispell-parse-output :filter-args
            #'endless/replace-quote)
#+END_SRC


* Save recentf automatically so recent files are stored even in the case of abnormal exit
#+BEGIN_SRC emacs-lisp
 (run-with-idle-timer 60 t 'recentf-save-list)
#+END_SRC


* new stuff
** allow org-insert-link to accept mail addresses like 'Name <name@some.address>'?
#+BEGIN_SRC emacs-lisp
(advice-add #'org-remove-angle-brackets :before-until
            (lambda (s) (if (string-prefix-p "mailto:" s) s)))
#+END_SRC
source: [[http://emacs.stackexchange.com/questions/12743/how-to-allow-org-insert-link-to-accept-mail-addresses-like-name-namesome-addr][org mode - How to allow org-insert-link to accept mail addresses like 'Name <name@some.address>'? - Emacs Stack Exchange]]


* possible to enable autocomplete in org-babel source code blocks?

yes - just use
: C-c '
to open source code block in indirect buffer



* update packages
 (run-with-idle-timer 6000 t 'endless/upgrade)


* save some buffers
#+BEGIN_SRC emacs-lisp
(defun jay/save-some-buffers ()
(interactive)
  (save-some-buffers 'no-confirm (lambda ()
    (cond
      ((and buffer-file-name (equal buffer-file-name abbrev-file-name)))
      ((and buffer-file-name (eq major-mode 'latex-mode)))
((and buffer-file-name (eq major-mode 'emacs-lisp-mode)))
((and buffer-file-name (eq major-mode 'fundamental-mode)))
((and buffer-file-name (eq major-mode 'markdown-mode)))
((and buffer-file-name (eq major-mode 'snippet-mode))) 
((and buffer-file-name (eq major-mode 'css-mode))) 
((and buffer-file-name (eq major-mode 'xml-mode))) 
((and buffer-file-name (eq major-mode 'nmxml-mode)))
((and buffer-file-name (eq major-mode 'gitconfig-mode)))
((and buffer-file-name (eq major-mode 'gitignore-mode)))
      ((and buffer-file-name (eq major-mode 'sh-mode)))
      ((and buffer-file-name (derived-mode-p 'org-mode)))))))
#+END_SRC

* stuff that I moved from custom.el
#+BEGIN_EXAMPLE emacs-lisp

;;;; autocomplete
;; I don't know what I'm doing here but it seems to work
;; auto-complete mode
(require 'auto-complete)
(dolist (mode '(magit-log-edit-mode log-edit-mode org-mode text-mode
                                    sass-mode  csv-mode
                                    html-mode sh-mode
                                    lisp-mode  markdown-mode emacs-lisp-mode ))
  (add-to-list 'ac-modes mode))


;; tab completion
(ac-set-trigger-key "TAB")

;; haven't used these, not sure how to
(define-key ac-completing-map (kbd "C-M-n") 'ac-next)
(define-key ac-completing-map (kbd "C-M-p") 'ac-previous)
(define-key ac-completing-map "\t" 'ac-complete)
(define-key ac-completing-map (kbd "M-RET") 'ac-help)
(define-key ac-completing-map "\r" 'nil)
#+END_EXAMPLE 
*
* globally enable palimpsest-mode
#+BEGIN_SRC emacs-lisp
(add-hook 'find-file-hook (lambda () (palimpsest-mode 1)))
#+END_SRC

* Pop to mark

Handy way of getting back to previous places.

#+BEGIN_SRC emacs-lisp
(setq set-mark-command-repeat-pop t)
#+END_SRC

*

* Treat all themes as safe

#+BEGIN_SRC emacs-lisp
(setq custom-safe-themes t)
#+END_SRC


* gnus
#+BEGIN_SRC emacs-lisp
(setq user-mail-address "dixit@aya.yale.edu")
(setq user-full-name "Jay Dixit")
(setq gnus-always-read-dribble-file t)
(setq gnus-select-method '(nnml ""))
(setq gnus-select-method '(nnimap "gmail"
(nnimap-address "imap.gmail.com")
(nnimap-server-port 993)
(nnimap-stream ssl)))
(setq gnus-use-cache t) 




(setq gnus-select-method
      '(nnimap "gmail"
	       (nnimap-address "imap.gmail.com")  ; it could also be imap.googlemail.com if that's your server.
	       (nnimap-server-port "imaps")
	       (nnimap-stream ssl)))




;; store email in ~/gmail directory
(setq nnml-directory "~/gmail")
(setq message-directory "~/gmail") 

;; define gnus directories
(setq message-directory "~/Dropbox/emacs/gnus/mail/")
(setq gnus-directory "~/Dropbox/emacs/gnus/news/")
(setq nnfolder-directory "~/Dropbox/emacs/gnus/mail/archive") 

;; How to read HTML mail
(setq mm-text-html-renderer 'w3m)
(setq gnus-summary-line-format "%-6,6B%-15,15f |%* %-40,40s |  %&user-date; | %U\n")

;; sort by most recent date
(setq gnus-article-sort-functions (quote ((not gnus-article-sort-by-date))))
(setq gnus-thread-sort-functions (quote ((not gnus-thread-sort-by-date))))


;; More attractive Summary View
;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
(when window-system
  (setq gnus-sum-thread-tree-indent "  ")
  (setq gnus-sum-thread-tree-root "") ;; "● ")
  (setq gnus-sum-thread-tree-false-root "") ;; "◯ ")
  (setq gnus-sum-thread-tree-single-indent "") ;; "◎ ")
  (setq gnus-sum-thread-tree-vertical        "│")
  (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
  (setq gnus-sum-thread-tree-single-leaf     "╰─► "))
(setq gnus-summary-line-format
      (concat
       "%0{%U%R%z%}"
       "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
       "  "
       "%4{%-20,20f%}"               ;; name
       "  "
       "%3{│%}"
       " "
       "%1{%B%}"
       "%s\n"))
(setq gnus-summary-display-arrow t)
#+END_SRC


** More attractive Summary View
    :PROPERTIES:
    :CUSTOM_ID: pretty-summary
    :END:
Thanks to Dan Davison.

#+begin_src emacs-lisp
  ;; http://groups.google.com/group/gnu.emacs.gnus/browse_thread/thread/a673a74356e7141f
  (when window-system
    (setq gnus-sum-thread-tree-indent "  ")
    (setq gnus-sum-thread-tree-root "") ;; "● ")
    (setq gnus-sum-thread-tree-false-root "") ;; "◯ ")
    (setq gnus-sum-thread-tree-single-indent "") ;; "◎ ")
    (setq gnus-sum-thread-tree-vertical        "│")
    (setq gnus-sum-thread-tree-leaf-with-other "├─► ")
    (setq gnus-sum-thread-tree-single-leaf     "╰─► "))
  (setq gnus-summary-line-format
        (concat
         "%0{%U%R%z%}"
         "%3{│%}" "%1{%d%}" "%3{│%}" ;; date
         "  "
         "%4{%-20,20f%}"               ;; name
         "  "
         "%3{│%}"
         " "
         "%1{%B%}"
         "%s\n"))
  (setq gnus-summary-display-arrow t)
#+end_src


** modified email-heading function

#+BEGIN_SRC emacs-lisp

(defun org-mime-htmlize (&optional arg)
"Export a portion of an email body composed using `mml-mode' to
html using `org-mode'.  If called with an active region only
export that region, otherwise export the entire body."
  (interactive "P")
  (require 'ox-org)
  (require 'ox-html)
  (let* ((region-p (org-region-active-p))
         (html-start (or (and region-p (region-beginning))
                         (save-excursion
                           (goto-char (point-min))
                           (search-forward mail-header-separator)
                           (+ (point) 1))))
         (html-end (or (and region-p (region-end))
                       ;; TODO: should catch signature...
                       (point-max)))
         (raw-body (concat org-mime-default-header
			   (buffer-substring html-start html-end)))
         (tmp-file (make-temp-name (expand-file-name
				    "mail" temporary-file-directory)))
         (body (org-export-string-as raw-body 'org t))
         ;; because we probably don't want to export a huge style file
         (org-export-htmlize-output-type 'inline-css)
         ;; makes the replies with ">"s look nicer
         (org-export-preserve-breaks org-mime-preserve-breaks)
	 ;; dvipng for inline latex because MathJax doesn't work in mail
	 (org-html-with-latex 'dvipng)
         ;; to hold attachments for inline html images
         (html-and-images
          (org-mime-replace-images
	   (org-export-string-as raw-body 'html t) tmp-file))
         (html-images (unless arg (cdr html-and-images)))
         (html (org-mime-apply-html-hook
                (if arg
                    (format org-mime-fixedwith-wrap body)
                  (car html-and-images)))))
    (delete-region html-start html-end)
    (save-excursion
      (goto-char html-start)
      (insert (org-mime-multipart
	       body html (mapconcat 'identity html-images "\n"))))))
#+END_SRC

** PLEASE-HELP-ME-DEBUG-MY-INEPT-CODE new-email-from-subtree          :rudi:

See my note at send-email-erika-styled. I'm afraid this function is now also broken, ever since I added (setq message-send-hook (quote (org-mime-htmlize)))

#+BEGIN_SRC emacs-lisp 

(defun new-email-from-subtree ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
  (interactive)
  ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (save-excursion
    (let ((content (progn
                     (unless (org-on-heading-p) (outline-previous-heading))
                     (let ((headline (org-element-at-point)))
                       (buffer-substring
                        (org-element-property :contents-begin headline)
                        (org-element-property :contents-end headline)))))
          (TO (org-entry-get (point) "TO" t))
          (CC (org-entry-get (point) "CC" t))
          (BCC (org-entry-get (point) "BCC" t))
          (SUBJECT (nth 4 (org-heading-components)))
          (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
          (continue nil)
          (switch-function nil)
          (yank-action nil)
          (send-actions '((email-send-action . nil)))
          (return-action '(email-heading-return)))

      (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
      (message-goto-body)
      (insert content)
      (when CC
        (message-goto-cc)
        (insert CC))
      (when BCC
        (message-goto-bcc)
        (insert BCC))
      (if TO
          (message-goto-body)
        (message-goto-to))
(end-of-buffer)
(insert "\nWarm regards,\nJay Dixit\n\n---\nJay Dixit
(646) 355-8001
[[http://jaydixit.com/][jaydixit.com]]
\n"))
(org-mime-htmlize)))


(defun new-email-from-subtree-no-signature ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
  (interactive)
  ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (save-excursion
    (let ((content (progn
                     (unless (org-on-heading-p) (outline-previous-heading))
                     (let ((headline (org-element-at-point)))
                       (buffer-substring
                        (org-element-property :contents-begin headline)
                        (org-element-property :contents-end headline)))))
          (TO (org-entry-get (point) "TO" t))
          (CC (org-entry-get (point) "CC" t))
          (BCC (org-entry-get (point) "BCC" t))
          (SUBJECT (nth 4 (org-heading-components)))
          (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
          (continue nil)
          (switch-function nil)
          (yank-action nil)
          (send-actions '((email-send-action . nil)))
          (return-action '(email-heading-return)))

      (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
      (message-goto-body)
      (insert content)
      (when CC
        (message-goto-cc)
        (insert CC))
      (when BCC
        (message-goto-bcc)
        (insert BCC))
      (if TO
          (message-goto-body)
        (message-goto-to))
(end-of-buffer)
)
(org-mime-htmlize)))
#+END_SRC

** PLEASE-DEBUG erika-send-mail 
#+BEGIN_SRC emacs-lisp
(defun erika-send-email ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
  (interactive)
; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (save-excursion
    (let ((content (progn
                     (unless (org-on-heading-p) (outline-previous-heading))
                     (let ((headline (org-element-at-point)))
                       (buffer-substring
                        (org-element-property :contents-begin headline)
                        (org-element-property :contents-end headline)))))
          (TO "\"Erika Casriel\" <erika.casriel@comcast.net>")
          (CC (org-entry-get (point) "CC" t))
          (BCC (org-entry-get (point) "BCC" t))
          (SUBJECT (nth 4 (org-heading-components)))
          (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
          (continue nil)
          (switch-function nil)
          (yank-action nil)
          (send-actions '((email-send-action . nil)))
          (return-action '(email-heading-return)))



      (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
      (message-goto-body)
      (insert content)
      (when CC
        (message-goto-cc)
        (insert CC))
      (when BCC
        (message-goto-bcc)
        (insert BCC))
      (if TO
          (message-goto-body)
        (message-goto-to))
)
(org-mime-htmlize)
))
#+END_SRC

*** PLEASE-HELP-ME-DEBUG-MY-INEPT-CODE [#A] erika-send-email-styled
Hi Rúdi,

So I added this line: 

(setq message-send-hook (quote (org-mime-htmlize)))

...because I'd like to call org-mime-htmlize automatically every time I send an email. However, adding this line breaks my other functions, including erika-send-email-styled and new-email-from-subtree. I tried to debug it, without much luck. Can you investigate? 

By the way, the version of org-mime that I'm using is the one that comes with org-mode in the contrib section. I'll attach the file. Thanks! 


#+BEGIN_SRC emacs-lisp
(defun erika-send-email-styled ()
  "Send the current org-mode heading as the body of an email, with headline as the subject.

use these properties
TO
CC
BCC
OTHER-HEADERS is an alist specifying additional
header fields.  Elements look like (HEADER . VALUE) where both
HEADER and VALUE are strings.

Save when it was sent as a SENT property. this is overwritten on
subsequent sends."
  (interactive)
                                        ; store location.
  (setq *email-heading-point* (set-marker (make-marker) (point)))
  (save-excursion
    (let ((content (progn
                     (unless (org-on-heading-p) (outline-previous-heading))
                     (let ((headline (org-element-at-point)))
                       (buffer-substring
                        (org-element-property :contents-begin headline)
                        (org-element-property :contents-end headline)))))
          (TO "Erika Casriel <sunjaydixit@gmail.com")
          (CC (org-entry-get (point) "CC" t))
          (BCC (org-entry-get (point) "BCC" t))
          (SUBJECT (nth 4 (org-heading-components)))
          (OTHER-HEADERS (eval (org-entry-get (point) "OTHER-HEADERS")))
          (continue nil)
          (switch-function nil)
          (yank-action nil)
          (send-actions '((email-send-action . nil)))
          (return-action '(email-heading-return)))



      (compose-mail TO SUBJECT OTHER-HEADERS continue switch-function yank-action send-actions return-action)
      (message-goto-body)
      (insert content)
      (when CC
        (message-goto-cc)
        (insert CC))
      (when BCC
        (message-goto-bcc)
        (insert BCC))
      (if TO
          (message-goto-body)
        (message-goto-to))
      )
    (let ((org-mime-html-hook
           (list* (lambda ()
                    (goto-char (point-min))
                    (while (re-search-forward "</?\\(h2\\)" nil t)
                      (replace-match "li" nil t nil 1)))
                  (lambda ()
                    (goto-char (point-min))
                    (org-mime-change-class-style "todo TODO" "color:red;font-weight:bold")
                    (goto-char (point-min))
                    (org-mime-change-class-style "todo MISSED" "color:red;font-weight:bold")
                    (goto-char (point-min))
                    (org-mime-change-class-style "done DONE" "color:green;font-weight:bold")
                    (goto-char (point-min))
                    (org-mime-change-class-style "todo DONE" "color:green;font-weight:bold"))
                  org-mime-html-hook)))
(org-mime-htmlize)
))
(message-send-and-exit)
)
#+END_SRC

* key-seq
key-seq.el provides a way to map pairs of sequentially but quickly pressed keys to commands. It includes two interactive functions: key-seq-define-global and key-seq-define which are complementary to key-chord-* functions found in key-chord.el. The difference is that key-seq-* functions produce bindings only in a defined key order while bindings defined with key-chord-* are symmetrical.

#+BEGIN_SRC emacs-lisp
(require 'key-seq)
(key-seq-define-global "qd" 'dired)
(key-seq-define text-mode-map "qf" 'flyspell-buffer)
#+END_SRC

* org-toggle-todo-heading

  #+BEGIN_SRC emacs-lisp
(defun org-toggle-todo-heading ()
  "Toggles the current line between a non-heading and TODO heading."
  (interactive)
  (let ((is-heading))
    (save-excursion
      (forward-line 0)
      (when (looking-at "^\\*")
        (setq is-heading t)))
    (if is-heading
        (progn
          (org-todo 'none) ; remove TODO
          (org-toggle-heading)) ; remove heading
      (progn
        (org-toggle-heading) ; convert to heading
        (org-todo 'nextset))))) ; add TODO  #+END_SRC
#+END_SRC

* fix recent-addresses file


  #+BEGIN_SRC emacs-lisp

(defun fix-recent-addresses-file ()
"One sentence summary of what this command do."
  (interactive)
  ;; do something …
  (shell-command "sed -i '' 's/\\\.\\\.\\\.//g' /Users/jay/.emacs.d/recent-addresses")
  (load "/Users/jay/Dropbox/emacs/prelude/recent-addresses"))
  #+END_SRC

* find-file tricks
[[http://oremacs.com/2015/01/09/ido-find-file-tilde/][tilde in ido-find-file ]]- doesn't work with smex

#+BEGIN_SRC emacs-lisp
(defun oleh-ido-setup-hook ()
  (define-key ido-file-dir-completion-map "~"
    (lambda ()
      (interactive)
      (ido-set-current-directory "~/")
      (setq ido-exit 'refresh)
      (exit-minibuffer))))

(add-hook 'ido-setup-hook 'oleh-ido-setup-hook)

(defun ido-find-file-jump (dir)
  "Return a command that sends DIR to `ido-find-file'."
  `(lambda ()
     (interactive)
     (ido-set-current-directory ,dir)
     (setq ido-exit 'refresh)
     (exit-minibuffer)))



(defvar oleh-ido-shortcuts
  '(("~/" "~")
    ("~/Dropbox/source/site-lisp/" "!")
    ("~/git/lispy/" "@")))

(mapc (lambda (x)
        (setcar x (ido-find-file-jump (car x))))
      oleh-ido-shortcuts)

(defun oleh-ido-setup-hook ()
  (mapc
   (lambda (x)
     (define-key ido-file-dir-completion-map (cadr x) (car x)))
   oleh-ido-shortcuts))

(add-hook 'ido-setup-hook 'oleh-ido-setup-hook)
#+END_SRC


* delete-extra-whitespace-region


  #+BEGIN_SRC emacs-lisp
(defun delete-extra-whitespace-region (beg end)
  "replace all whitespace in the region with single spaces"
  (interactive "r")
  (save-excursion
    (save-restriction
      (narrow-to-region beg end)
      (goto-char (point-min))
      (while (re-search-forward "^\\s-+" nil t)
        (replace-match "")))))
  #+END_SRC

* double-line-breaks-in-region

  #+BEGIN_SRC emacs-lisp
(defun double-line-breaks-in-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["\r" "\n\n"]
["\n" "\n\n"]
)))
  #+END_SRC

* fixup-css-region

  #+BEGIN_SRC emacs-lisp
(defun fixup-css-region (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
                          '(["h2" "li"]
["<span class=\"todo DONE\">" "<span class=\"todo DONE\" style=\"color:green;font-weight:bold\">"]

["<span class=\"todo MISSED\">" "<span class=\"todo MISSED\" style=\"color:red;font-weight:bold\">"]

["<span class=\"todo TODO\">" "<span class=\"todo TODO\" style=\"color:red;font-weight:bold\">"]

))
)
  #+END_SRC

* xah-replace-pairs

  #+BEGIN_SRC emacs-lisp
(require 'xah-replace-pairs)
(defun replace-html-chars-region (begin end)
  (interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["&" "&amp;"]
 ["<" "&lt;"]
 [">" "&gt;"]
 )))
  #+END_SRC

* openwith

  #+BEGIN_SRC emacs-lisp
(when (require 'openwith nil 'noerror)
      (setq openwith-associations
            (list
             (list (openwith-make-extension-regexp
                    '())
                   "open"
                   '(file))

(list (openwith-make-extension-regexp
                    '("mp3"))
                   "open"
                   '(file))

(list (openwith-make-extension-regexp
                    '("mp4" "mpg" "mpeg"
                      "avi" "wmv" "wav" "mov" "flv"
                      "ogm" "ogg" "mkv" "webm"))
                   "open -a vlc"
                   '(file))

             (list (openwith-make-extension-regexp
                    '("xbm" "pbm" "pgm" "ppm" "pnm"
                      "png" "gif" "bmp" "tif" "jpeg" "jpg"))
                   "open"
                   '(file))

             (list (openwith-make-extension-regexp
                    '("doc" "docx" "xls" "xlsx" "ppt" "odt" "ods" "odg" "odp"))
                   "open"
                   '(file))
             '("\\.lyx" "lyx" (file))
             '("\\.chm" "kchmviewer" (file))
             (list (openwith-make-extension-regexp
                    '("pdf"))
                   "open"
                   '(file))
             ))
      (openwith-mode 1))

(setq org-startup-with-inline-images nil)

  #+END_SRC

* Monochrome rainbows are the best way to reveal unbalanced delimiters
I rely and paredit and formatting to keep my parenthesis honest, and for the most part that works out great. Occasionally I need to go outside the box. Emacs defaults are terrible for finding unbalanced forms when things go wrong. This setting makes it obvious that there is an error when I have fallen out with my grouping delimiters.

The trick is to not use different colored delimiters! The reason I need the rainbow delimiters package is only to highlight unbalanced delimiters, which it does quickly and accurately. For those cases where I really want to differentiate a group, placing the cursor on the delimiter causes Emacs to highlight the other delimiter.

#+BEGIN_SRC emacs-lisp
(add-hook 'prog-mode-hook 'rainbow-delimiters-mode)
(require 'rainbow-delimiters)
(set-face-attribute 'rainbow-delimiters-unmatched-face nil
                    :foreground 'unspecified
                    :inherit 'error)
#+END_SRC

* Chords
Emacs key-strokes are pretty gnarly. Especially for a VIM guy like me (Emacs evil-mode is the best VIM). Chords are so much more comfortable! For example I press j and x together instead of M-x. Just be careful when choosing chords that they are combinations you will never type normally. I mainly use chords for switching buffers, navigating windows, opening files, and transposing expressions.

* org-download


  #+BEGIN_SRC emacs-lisp
(require 'org-download)
(setq-default org-download-image-dir "/Users/jay/Downloads")
(setq org-download-method (quote directory))
  #+END_SRC

* delete duplicate lines
You can tell delete-duplicate-lines to ignore blank lines by calling it via


#+BEGIN_SRC emacs-lisp
(defun delete-duplicate-lines-keep-blanks ()
  (interactive)
  (delete-duplicate-lines (region-beginning) (region-end) nil nil t)) 
#+END_SRC


* helm search current directory 

  #+BEGIN_SRC emacs-lisp
(defun helm-do-grep-current-directory-tree ()
  "Recursively search current directory.
If a parent directory has a `dir-locals-file', use that as the
root instead."
  (interactive)
  (let ((variables-file (dir-locals-find-file
                         (or (buffer-file-name) default-directory))))
    (helm-do-grep-1
     (list
      (cond
       ((stringp variables-file)
        (file-name-directory variables-file))
       ((consp variables-file)
        (nth 0 variables-file))
       (t default-directory)))
     t nil '("*"))))
  #+END_SRC


* contract-contractions


  #+BEGIN_SRC emacs-lisp

(defun contract-contractions (begin end)
(interactive "r")
  (xah-replace-pairs-region begin end
 '(
 ["I have" "I've"]
["I am" "I'm"] 
)))

  #+END_SRC

* fix double capitals
Source: [[http://endlessparentheses.com/fixing-double-capitals-as-you-type.html?source%3Drss][Fixing DOuble CApitals as you type · Endless Parentheses]]

  #+BEGIN_SRC emacs-lisp
(defun dcaps-to-scaps ()
  "Convert word in DOuble CApitals to Single Capitals."
  (interactive)
  (and (= ?w (char-syntax (char-before)))
       (save-excursion
         (and (if (called-interactively-p)
                  (skip-syntax-backward "w")
                (= -3 (skip-syntax-backward "w")))
              (let (case-fold-search)
                (looking-at "\\b[[:upper:]]\\{2\\}[[:lower:]]"))
              (capitalize-word 1)))))

(add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)

(define-minor-mode dubcaps-mode
  "Toggle `dubcaps-mode'.  Converts words in DOuble CApitals to
Single Capitals as you type."
  :init-value nil
  :lighter (" DC")
  (if dubcaps-mode
      (add-hook 'post-self-insert-hook #'dcaps-to-scaps nil 'local)
    (remove-hook 'post-self-insert-hook #'dcaps-to-scaps 'local)))

(add-hook 'text-mode-hook #'dubcaps-mode)
(add-hook 'org-mode-hook #'dubcaps-mode)
  #+END_SRC

* delete file and buffer

  #+BEGIN_SRC emacs-lisp
(defun prelude-delete-file-and-buffer ()
  "Kill the current buffer and deletes the file it is visiting."
  (interactive)
  (let ((filename (buffer-file-name)))
    (when filename
      (if (vc-backend filename)
          (vc-delete-file filename)
        (when (y-or-n-p (format "Are you sure you want to delete %s? " filename))
          (delete-file filename)
          (message "Deleted file %s" filename)
          (kill-buffer))))))


  #+END_SRC

* yasnippet 
  #+BEGIN_SRC emacs-lisp 
(require 'yasnippet) 
(yas-global-mode 1) 

;; load yasnippet directories
;; TODO needs to be set before loading snippets somehow
(setq yas-snippet-dirs '("~/Downloads/interesting-snippets" "~/Dropbox/emacs/snippets"))

;; don't insert random spaces in my prose
(setq yas-indent-line (quote none)) 

;; take input word including hyphen.
(setq yas/key-syntaxes '("w_" "w_." "^ ")) ; default is '("w" "w_" "w_." "^ ")

;;; auto complete mod
;;; should be loaded after yasnippet so that they can work together
(require 'auto-complete-config)
(add-to-list 'ac-dictionary-directories "~/.emacs.d/ac-dict")
(ac-config-default)
;;; set the trigger key so that it can work together with yasnippet on tab key,
;;; if the word exists in yasnippet, pressing tab will cause yasnippet to
;;; activate, otherwise, auto-complete will
(ac-set-trigger-key "TAB")
(ac-set-trigger-key "<tab>") 


   (add-hook 'org-mode-hook
                    (lambda ()
                      (org-set-local 'yas-trigger-key [tab])
                      (define-key yas-keymap [tab] 'yas-next-field-or-maybe-expand))) 

    (defun yas-org-very-safe-expand ()
            (let ((yas-fallback-behavior 'return-nil)) (yas-expand))) 

    (add-hook 'org-mode-hook
                    (lambda ()
                      (make-variable-buffer-local 'yas-trigger-key)
                      (setq yas-trigger-key [tab])
                      (add-to-list 'org-tab-first-hook 'yas-org-very-safe-expand)
                      (define-key yas-keymap [tab] 'yas-next-field))) 



#+END_SRC


* flyspell skip source blocks

  #+BEGIN_SRC emacs-lisp
;; NO spell check for embedded snippets
(defadvice org-mode-flyspell-verify (after org-mode-flyspell-verify-hack activate)
  (let ((rlt ad-return-value)
        (begin-regexp "^[ \t]*#\\+begin_\\(src\\|html\\|latex\\)")
        (end-regexp "^[ \t]*#\\+end_\\(src\\|html\\|latex\\)")
        old-flag
        b e)
    (when ad-return-value
      (save-excursion
        (setq old-flag case-fold-search)
        (setq case-fold-search t)
        (setq b (re-search-backward begin-regexp nil t))
        (if b (setq e (re-search-forward end-regexp nil t)))
        (setq case-fold-search old-flag))
      (if (and b e (< (point) e)) (setq rlt nil)))
    (setq ad-return-value rlt)))
  #+END_SRC

* tiny-expand

#+BEGIN_SRC emacs-lisp 
(require 'tiny)
(tiny-setup-default) 

(defun new-week ()
  (interactive)
(tiny-expand "m0\n7|*** committed actions:  <%(date "mon" x)>\n**** TODO \n") 
  ) 



#+END_SRC 


* outline mode 
  #+BEGIN_SRC emacs-lisp
(add-hook 'emacs-lisp-mode-hook
          (lambda ()
            (make-local-variable 'outline-regexp)
            (setq outline-regexp "^;;; ")
            (make-local-variable 'outline-heading-end-regexp)
            (setq outline-heading-end-regexp ":\n")
            (outline-minor-mode 1)
))
  #+END_SRC

* which-key mode 
  #+BEGIN_EXAMPLE emacs-lisp
(require 'which-key)
(setq which-key-popup-type 'side-window) 
(setq which-key-side-window-location 'bottom) 

(which-key-mode)
  #+END_EXAMPLE 

* a keybinding to open my accountability file

  #+BEGIN_SRC emacs-lisp
(defun accountability-open ()
  (interactive)
  (find-file "/Users/jay/Dropbox/writing/notationaldata/accountability.org")
  )

(define-key key-minor-mode-map (kbd "<s-S-right>") 'accountability-open)

(defun playful-open ()
  (interactive)
  (find-file "/Users/jay/Dropbox/writing/notationaldata/playful.org")
  )
(define-key key-minor-mode-map (kbd "<s-S-left>") 'playful-open)

  #+END_SRC

* dictionary look up

  #+BEGIN_SRC emacs-lisp
;; (add-to-list 'load-path "/Users/jay/Downloads/dictionary-el-master")
  #+END_SRC


* re-builder

  #+BEGIN_SRC emacs-lisp
(require 're-builder)
(setq reb-re-syntax 'string)
  #+END_SRC

* imenu-list

  #+BEGIN_SRC emacs-lisp

  #+END_SRC

* stripe buffer 
  #+BEGIN_SRC emacs-lisp
(add-hook 'dired-mode-hook 'turn-on-stripe-buffer-mode)
(add-hook 'org-mode-hook 'turn-on-stripe-table-mode)
  #+END_SRC

* fasd

  #+BEGIN_SRC emacs-lisp
(global-fasd-mode 1)
(setq fasd-enable-initial-prompt nil)
  #+END_SRC

* mu4e 
  #+BEGIN_SRC emacs-lisp 
(let ((default-directory "/usr/local/share/emacs/site-lisp/"))
  (normal-top-level-add-subdirs-to-load-path)) 
(require 'mu4e)
(setq mu4e-maildir "/Users/jay/Dropbox/mail/gmail") 
(setq mu4e-sent-folder   "/sent")
(setq mu4e-drafts-folder "/drafts")
(setq mu4e-trash-folder  "/trash") 

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; allow for updating mail using 'U' in the main view:
;; (setq mu4e-get-mail-command "offlineimap")
(setq mu4e-get-mail-command "mbsync -a")
(setq mu4e-change-filenames-when-moving t)

(setq mu4e-attachment-dir "~/Downloads") 


;; shortcuts
(setq mu4e-maildir-shortcuts
    '( ("/starred"               . ?i)
       ("/sent"   . ?s)))

;; something about ourselves
(setq
   user-mail-address "sunjaydixit@gmail.com"
   user-full-name  "Jay Dixit"
   mu4e-compose-signature
    (concat
      "Best,\n"
      "Jay\n"))

;; show images
(setq mu4e-show-images t)

;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
  (imagemagick-register-types))

;; convert html emails properly
;; Possible options:
;;   - html2text -utf8 -width 72
;;   - textutil -stdin -format html -convert txt -stdout
;;   - html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
;;   - w3m -dump -cols 80 -T text/html
;;   - view in browser (provided below)
(setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")

;; spell check
(add-hook 'mu4e-compose-mode-hook
        (defun my-do-compose-stuff ()
           "My settings for message composition."
           (set-fill-column 72)
           (flyspell-mode)))

;; add option to view html message in a browser
;; `aV` in view to activate
(add-to-list 'mu4e-view-actions
  '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; fetch mail every 10 mins
(setq mu4e-update-interval 600)


;; Use fancy chars
(setq mu4e-use-fancy-chars t) 


(setq mu4e-confirm-quit nil
      mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
      mu4e-html2text-command "html2text -utf8 -width 72"
      ) 

;; maildirs
(require 'mu4e-maildirs-extension)
(mu4e-maildirs-extension) 
(setq mu4e-maildirs-extension-title "Folders")

#+END_SRC

* mu4e keybindings

  #+BEGIN_SRC emacs-lisp

;; (define-key mu4e-mode-map "r" 'mu4e-compose-reply)

  #+END_SRC

* mu4e attachments
Wouldn't it be awesome to be able to send files from dired using your mail client?

I'll need a special version of the gnus-dired-mail-buffers function so it understands mu4e buffers as well:


#+BEGIN_SRC emacs-lisp
(require 'gnus-dired)
;; make the `gnus-dired-mail-buffers' function also work on
;; message-mode derived modes, such as mu4e-compose-mode
(defun gnus-dired-mail-buffers ()
  "Return a list of active message buffers."
  (let (buffers)
    (save-current-buffer
      (dolist (buffer (buffer-list t))
        (set-buffer buffer)
        (when (and (derived-mode-p 'message-mode)
                   (null message-sent-message-via))
          (push (buffer-name buffer) buffers))))
    (nreverse buffers)))

(setq gnus-dired-mail-mode 'mu4e-user-agent)
(add-hook 'dired-mode-hook 'turn-on-gnus-dired-mode) 
#+END_SRC

With this, I can attach a file as an attachment to a new email message by entering C-c RET C-a, and I'm good to go. 

* gnus keybindings

  #+BEGIN_SRC emacs-lisp
(define-key gnus-summary-mode-map "c"
  'compose-mail)
 
(define-key gnus-summary-mode-map "a"
  'gnus-summary-wide-reply) 


  #+END_SRC


* notmuch

  #+BEGIN_SRC emacs-lisp
(add-to-list 'load-path "/Users/jay/Dropbox/emacs/prelude/personal/notmuch/")
(require 'notmuch)
(setq notmuch-search-oldest-first nil)
(defadvice notmuch-mua-reply (around notmuch-fix-sender)
     (let ((sender "Jay Dixit <dixit@aya.yale.edu>"))
       ad-do-it))
   (ad-activate 'notmuch-mua-reply) 

;; Initially the cursor is positioned at the beginning of buffer. 
;; Some users liked the "ancient" version where cursor was moved to the first Saved searches button. 
;; Add the following code to your notmuch emacs configuration file in case you want this behaviour:

    (add-hook 'notmuch-hello-refresh-hook
              (lambda ()
                (if (and (eq (point) (point-min))
                         (search-forward "Saved searches:" nil t))
                    (progn
                      (forward-line)
                      (widget-forward 1))
                  (if (eq (widget-type (widget-at)) 'editable-field)
                      (beginning-of-line))))) 

;; modify the keybindings 
(define-key notmuch-show-mode-map "y"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-show-tag (list "-flagged" "-inbox")))) 
(define-key notmuch-search-mode-map "y"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-search-tag (list "-flagged" "-inbox")))) 
(define-key notmuch-tree-mode-map "y"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-tree-tag (list "-flagged" "-inbox")))) 


(define-key notmuch-search-mode-map "S"
      (lambda ()
        "toggle flagged tag for message"
        (interactive)
        (if (member "flagged" (notmuch-search-get-tags))
            (notmuch-search-tag (list "-flagged"))
          (notmuch-search-tag (list "+flagged")))))
(define-key notmuch-tree-mode-map "S"
      (lambda ()
        "toggle flagged tag for message"
        (interactive)
        (if (member "flagged" (notmuch-tree-get-tags))
            (notmuch-tree-tag (list "-flagged"))
          (notmuch-tree-tag (list "+flagged")))))


(define-key notmuch-show-mode-map "g"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-refresh-this-buffer))) 
(define-key notmuch-search-mode-map "g"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-refresh-this-buffer))) 
(define-key notmuch-tree-mode-map "g"
      (lambda ()
        "archive"
        (interactive)
        (notmuch-refresh-this-buffer))) 

;; modify the documentation about the keybindings
(defun notmuch-hello-insert-footer ()
  "Insert the notmuch-hello footer."
  (let ((start (point)))
    (widget-insert "Type a search query and hit RET to view matching threads.\n")
    (when notmuch-search-history
      (widget-insert "Hit RET to re-submit a previous search. Edit it first if you like.\n")
      (widget-insert "Save recent searches with the `save' button.\n"))
    (when notmuch-saved-searches
      (widget-insert "Edit saved searches with the `edit' button.\n"))
    (widget-insert "Hit RET or click on a saved search or tag name to view matching threads.\n")
    (widget-insert "`=' to refresh this screen. `s' to search messages. `q' to quit.\n")
    (widget-insert "`g' to refresh this screen. `s' to search messages. `q' to quit.\n")
    (widget-insert "`S' to star or unstar messages.\n")
    (widget-insert "`S' to star or unstar messages.\n")
    (widget-create 'link
		   :notify (lambda (&rest ignore)
			     (customize-variable 'notmuch-hello-sections))
		   :button-prefix "" :button-suffix ""
		   "Customize")
    (widget-insert " this page.")
    (let ((fill-column (- (window-width) notmuch-hello-indent)))
      (center-region start (point)))))



;; doesn't work 
  #+END_SRC
