* regexp
Let Emacs Create Your Regexp
One can use the function 'regexp-opt' to create elisp regexps. Suppose you want to find out the syntax for a regexp that matches both "end" and "endif". Enter the following in an elisp buffer, say *scratch*: 
(regexp-opt '("end" "endif") t)
Then put the cursor after the last parentesis and give the command 'C-x C-e'. The result "\\(end\\(?:if\\)?\\)" should appear in the minibuffer, and also in the buffer *Messages*.


* org for academics 
From: John Kitchin <jkitchin <at> andrew.cmu.edu>
Subject: Re: Organizing and taming hectic Academia work (faculty	viewpoint)? Tips or a good guides sought after :)

and
https://www.youtube.com/watch?v=cRUCiF2MwP4

See http://github.com/jkitchin/jmax for my Emacs setup for
org-mode.

My only other advice is start learning to program in emacs-lisp. It took
me about four years to get proficient enough to write org-ref. I learned
by solving lots of little problems, and building up to bigger
problems. A lot of those are documented in my blog. Read the emacs and
emacs-lisp manuals (read them in Emacs or in a browser). They take some
time, so skip the stuff that doesn't make sense and come back to it
later if you need to. 

Consider getting the book at
https://www.masteringemacs.org. It isn't about org-mode, but it will
make you better at using Emacs. 

Consider reading Land of Lisp. It isn't
about Emacs or Emacs-lisp, but it might interest you in programming in a
lispy language, and it is a fun read. 

* word export
With ox-pandoc you can export to .docx directly.  No need to go through
LaTeX.  Ox-pandoc is pretty amazing.

* where do you put content within a TODO list?
For me the answer depends on the size of the text, and how you generate
the final report. I would probably make a link like [[./big-report.org]]
in the first section. That would make it pretty easy to have a
standalone document with headlines at whatever level is appropriate that
can be exported in the desired format.


* shell
Filtering text through a shell command in Emacs

In vi[m] there is the ! command which lets me pipe text through a shell command -- like sort or indent -- and get the filtered text back into the buffer. Is there an equivalent in emacs?

You can select a region and type `C-u M-| command RET', and it replaces the region with the command output in the same buffer due to the interactive prefix argument of shell-command-on-region. 

I wrote this a few years back, it might help you:

#+BEGIN_EXAMPLE emacs-lisp 
(defun generalized-shell-command (command arg)
  "Unifies `shell-command' and `shell-command-on-region'. If no region is
selected, run a shell command just like M-x shell-command (M-!).  If
no region is selected and an argument is a passed, run a shell command
and place its output after the mark as in C-u M-x `shell-command' (C-u
M-!).  If a region is selected pass the text of that region to the
shell and replace the text in that region with the output of the shell
command as in C-u M-x `shell-command-on-region' (C-u M-|). If a region
is selected AND an argument is passed (via C-u) send output to another
buffer instead of replacing the text in region."
  (interactive (list (read-from-minibuffer "Shell command: " nil nil nil 'shell-command-history)
                     current-prefix-arg))
  (let ((p (if mark-active (region-beginning) 0))
        (m (if mark-active (region-end) 0)))
    (if (= p m)
        ;; No active region
        (if (eq arg nil)
            (shell-command command)
          (shell-command command t))
      ;; Active region
      (if (eq arg nil)
          (shell-command-on-region p m command t t)
        (shell-command-on-region p m command))))) 

(global-set-key [f3] 'generalized-shell-command) 
#+END_EXAMPLE

I've found this function to be very helpful. If you find it useful as well, I suggest binding it to some function key for convenience, personally I use F3:



* links to directories

[[file+emacs:~/Downloads/]] 

* Emacs allows you to build your own text editor
[[http://mbork.pl/2014-07-25_What_is_Emacs%252c_really][Marcin Borkowski: 2014-07-25 What is Emacs, really]]

This might be old news for more seasoned Emacs users, but as I have been using it for only a bit more than a decade, I feel like a, say, intermediate user.

So, basically, some time ago I had a kind of revelation and I understood what Emacs really is. Many people think it's a text editor; that's not 100% true. There's also a joke that it is an operating system; this has some grain of truth in it, but it's also not the whole story.

What is Emacs, then? It is a DIY kit for building Your Personal Text Editor™. It comes with a default one, which is decent (but not phenomenal, unless you tweak it a bit/a lot, depending on your preferences), but it's neither the only, nor necessarily the best one (there exists one other really good – maybe even better – editor, which we shall not name here). The real power of Emacs is that you can build your custom editor on top of it. And this is going to be the awesomest one, because, you know, it is the only one really suited to your needs.

Pretty obvious, I know. But I guess it's important that you get that when you make the decision about which editor to choose, so maybe someone will find this post useful. 

* org-one-to-many

A few days ago I announced this on the Org-mode mailing list, and let me
repeat it here. I started a small project,
called [[https://github.com/mbork/org-one-to-many][org-one-to-many]],
whose aim is to provide a way to split an Org file into subfiles.
Currently, all sections at a given level are output to their own files,
and the main file is transformed into a file with all those sections
replaced by links to them. All the internal links in the source file are
converted (as needed) to external links pointing to the newly created
files.

* dired filetypes

(setq dired-guess-shell-alist-user
      '(("\\.pdf\\'" "evince")
	("\\.tex\\'" "pdflatex")
	("\\.ods\\'\\|\\.xlsx?\\'\\|\\.docx?\\'\\|\\.csv\\'" "libreoffice"))) 


* dired omit
Another nice thing to know is the variable completion-ignored-extensions. It is a set of strings (not regexen!) which are "uninteresting" from completion point of view. (For example, it might be a good idea to put ".o" or ".aux" etc. there.) One might argue that this has little to do with Dired. Enter Dired-X, a built-in library enhancing Dired. One of the features of Dired-X is dired-omit-mode, which turns off displaying of "uninteresting" files. (Remember to set completion-ignored-extensions before you (require 'dired-x)!) You can turn it on and off with C-x M-o in Dired (assuming that you require 'dired-x in your init.el). (Notice: it used to be just M-o in older Emacsen.) 

* define-word 
Here is a version of the use-package expression that will load define-word only when necessary and not at emacs load time:

(use-package define-word
  :bind (("H-d" . define-word-at-point)
         ("H-D" . define-word))) 
