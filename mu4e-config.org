
** mu4e 
*** mu4e setup
 #+BEGIN_SRC emacs-lisp 
;; (let ((default-directory "/usr/local/share/emacs/site-lisp/")) (normal-top-level-add-subdirs-to-load-path)) 
; what is this?

(setq mu4e-mu-binary "/usr/local/bin/mu") 
(require 'mu4e)
(setq mu4e-sent-folder "/sent")
(setq mu4e-drafts-folder "/drafts")
(setq mu4e-trash-folder "/trash") 
;; (setq mu4e-org-contacts-file "/Users/jay/nd/contacts-org-jay.txt")


;; (setq mu4e-maildir "/Users/jay/Dropbox/mail/gmail/") 


;; my profile
;;(setq mu4e-compose-signature
;; (concat
;; "best,\n"
;; "jay\n"))



;; display HTML email nicely
(setq mu4e-html2text-command "w3m -T text/html") 
;; works but better than the other one, html2text or whatever it's called 
;; convert html emails properly
;; Possible options:
;; ---html2text -utf8 -width 72
;; ---textutil -stdin -format html -convert txt -stdout
;; ---html2markdown | grep -v '&nbsp_place_holder;' (Requires html2text pypi)
;; ---w3m -dump -cols 80 -T text/html
;; ---view in browser (provided below)
;; (setq mu4e-html2text-command "textutil -stdin -format html -convert txt -stdout")


;; collect email addresses
;; only add email addresses of email sent directly to me 
(setq mu4e-compose-complete-only-personal t)
(setq mu4e-compose-complete-only-after "2015-01-01")

;;(setq mu4e-contacts-func 'mu4e~fill-contacts)
;;(mu4e~proc-contacts t nil) 

;; composing mail
(setq mu4e-compose-dont-reply-to-self t)
(setq mu4e-compose-in-new-frame nil)
(setq mu4e-compose-signature-auto-include nil)

;; don't save message to Sent Messages, Gmail/IMAP takes care of this
(setq mu4e-sent-messages-behavior 'delete)

;; don't confirm before applying flags
(setq mu4e-headers-leave-behavior 'apply) 

;; allow for updating mail using 'U' in the main view:
;; (setq mu4e-get-mail-command "offlineimap")
(setq mu4e-get-mail-command "mbsync -a")
(setq mu4e-change-filenames-when-moving t)

(setq mu4e-attachment-dir "~/Downloads") 

;; go straight to inbox; bound to s-l
(defun mu4e-gmail ()
 (interactive)
(mu4e)
 (mu4e~headers-jump-to-maildir "/starred[Gmail]/.Starred")
 ) 

;; show images
(setq mu4e-show-images t)

;; use imagemagick, if available
(when (fboundp 'imagemagick-register-types)
 (imagemagick-register-types))


;; spell check
(add-hook 'mu4e-compose-mode-hook
  (defun my-do-compose-stuff ()
   "My settings for message composition."
   (set-fill-column 72)
   (flyspell-mode)))

;; add option to view html message in a browser
;; `aV` in view to activate
(add-to-list 'mu4e-view-actions
 '("ViewInBrowser" . mu4e-action-view-in-browser) t)

;; fetch mail every 10 mins
(setq mu4e-update-interval 600)


;; Use fancy chars
(setq mu4e-use-fancy-chars t) 


(setq mu4e-confirm-quit nil
  mu4e-headers-date-format "%d/%b/%Y %H:%M" ; date format
  mu4e-html2text-command "html2text -utf8 -width 72"
  ) 

;; maildirs
;; (require 'mu4e-maildirs-extension)
;; (mu4e-maildirs-extension) 
;; (setq mu4e-maildirs-extension-title "Folders")

 #+END_SRC

**** mu4e keybindings 
 #+BEGIN_SRC emacs-lisp

;; shortcuts
(setq mu4e-maildir-shortcuts
'( 
("/starred[Gmail]/.Starred"  . ?i) 
("/inbox"  . ?v) 
("/sent" . ?s)))


;; (define-key mu4e-mode-map "r" 'mu4e-compose-reply)


;; start screen
(define-key mu4e-main-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-main-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-main-mode-map "g" 'mu4e-update-mail-and-index) 

;; inbox
(define-key mu4e-headers-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-headers-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-headers-mode-map "y" 'mu4e-headers-mark-for-unflag) 
(define-key mu4e-headers-mode-map "g" 'mu4e-update-mail-and-index) 
;; (local-unset-key mu4e-headers-mode-map "g" 'mu4e-update-mail-and-index) 
(define-key mu4e-headers-mode-map "k" 'mu4e-headers-prev)
(define-key mu4e-headers-mode-map "j" 'mu4e-headers-next) 


;; message view ("mu4e-view-mode)")
(define-key mu4e-view-mode-map "r" 'mu4e-compose-reply) 
(define-key mu4e-view-mode-map "c" 'mu4e-compose-new) 
(define-key mu4e-view-mode-map "y" 'mu4e-view-mark-for-unflag) 
(define-key mu4e-view-mode-map "k" 'mu4e-view-headers-prev) 
(define-key mu4e-view-mode-map "j" 'mu4e-view-headers-next) 


;; unset keys (worked!)
(add-hook 'mu4e-headers-mode-hook 
   (lambda ()
   (local-unset-key (kbd "<M-right>"))
   (local-unset-key (kbd "<M-left>"))
)) 


(add-hook 'mu4e-view-mode-hook 
   (lambda ()
   (local-unset-key (kbd "<M-right>"))
   (local-unset-key (kbd "<M-left>"))
)) 

 #+END_SRC

**** mu4e attachments
 Wouldn't it be awesome to be able to send files from dired using your mail client?

 I'll need a special version of the gnus-dired-mail-buffers function so it understands mu4e buffers as well:

**** gmail starred 
The remaining problem is to propagate to Gmail that I've refiled 
(archived) a message. I also noticed that flagging a message in /mu4e/ 
doesn't immediately mean the message is starred on the Gmail side. With 
the recently added ~mu4e-mark-execute-pre-hook~ it becomes possible to 
whip Gmail into doing my bidding :) 

# #+BEGIN_SRC elisp 
(add-hook 'mu4e-mark-execute-pre-hook 
   (lambda (mark msg) 
   (cond ((member mark '(refile trash)) (mu4e-action-retag-message msg "-\\Inbox")) 
     ((equal mark 'flag) (mu4e-action-retag-message msg "\\Starred")) 
     ((equal mark 'unflag) (mu4e-action-retag-message msg "-\\Starred"))))) 
# #+END_SRC 

I've been using this for about a week now and I'm rather liking this setup so far. 

It wasn't until after a couple of days that I realised this makes /mu4e/ 
more like Gmail than it was with me first setup, i.e. all email is in a 
single folder and I use searching exclusively to find stuff :-) 
Source: [[https://groups.google.com/forum/#!msg/mu-discuss/BpGtwVHMd2E/Wf1rJdx9DgAJ][Mu4e and Gmail, my current setup---Google Groups]]
*** mu4e contexts
#+BEGIN_SRC emacs-lisp
(setq mu4e-contexts
 `( ,(make-mu4e-context
	 :name "Sunjay E. Dixit"
	 :enter-func (lambda () (mu4e-message "Switch to sunjaydixit@gmail.com context"))
 :match-func (lambda (msg)
     (when msg 
     (mu4e-message-contact-field-matches msg 
              :to "dixit@aya.yale.edu")))
 :vars '((mu4e-user-mail-address-list '("sunjaydixit@gmail.com" "dixit@aya.yale.edu" "jay@jaydixit.com"))
   ( user-full-name . "Jay Dixit" )
   (mu4e-maildir . "/Users/jay/Dropbox/mail/gmail/") 
   (mu4e-mu-home . "/Users/jay/Dropbox/mail/mu/gmail/") 
   ( mu4e-compose-signature .
		 (concat
"\n---\nJay Dixit\n"
"[[http://jaydixit.com/][jaydixit.com]]\n"))))


  ,(make-mu4e-context
	 :name "Vivovii"
	 :enter-func (lambda () (mu4e-message "Switch to Vivovii context"))
	 ;; leave-fun not defined
	 :match-func (lambda (msg)
		 (when msg 
		 (mu4e-message-contact-field-matches msg 
		 :to "jay@vivovii.com")))
	 :vars '((mu4e-user-mail-address-list . '("jay@vivovii.com"))
    ( user-full-name . "Jay Dixit" )
    (mu4e-maildir . "/Users/jay/Dropbox/mail/vivovii/") 
    (mu4e-mu-home . "/Users/jay/Dropbox/mail/mu/vivovii/") 
    ( mu4e-compose-signature .
		 (concat
		 "Jay Dixit\n"
		 "vivovii.com\n"))))))

 ;; set `mu4e-context-policy` and `mu4e-compose-policy` to tweak when mu4e should
 ;; guess or ask the correct context, e.g.

 ;; start with the first (default) context; 
 ;; default is to ask-if-none (ask when there's no context yet, and none match)
 ;; (setq mu4e-context-policy 'pick-first)

 ;; compose with the current context is no context matches;
 ;; default is to ask 
 ;; '(setq mu4e-compose-context-policy nil) 


#+END_SRC


