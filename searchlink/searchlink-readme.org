Searchlink works in a few ways:

- Run a quick search on a single selection, and have the selection replaced with the resulting url (and optional title) as a Markdown inline link, a Markdown reference, or just a plain url.
- Run a single search and have the results put on your clipboard, perfect for using from scripts and launchers (e.g. LaunchBar or Alfred).
- The "bracket" format, which allows you to just write, marking things to link as you go. When you're done, you can run it on the full document and---if your queries were good---have your links generated automatically without ever opening a browser.


Replace text with a link 

: dark night of the soul

If you end the selected text with "!!", it will only output the url.

: dark night of the soul!!

If you end the search with a "^"---which can be before or after a "!!"---it will copy the result to the clipboard and not print anything out.

: dark night of the soul !!^

In single line searches, text in parenthesis or double quotes will be used as the link title

: dark night of the soul "my article"

** arg 
- !wiki
- !def
- !@t : Link text as Twitter username

** modifiers 
- !! will only return the URL without any link formatting
- ^ will output the result to the clipboard and leave input text in place

quotes no longer required around additional search terms
if search terms in parenthesis start with a "+", they're appended to the link text for the search, otherwise they replace it
A tilde (~) at the end of a single-string search with no bracket syntax checks the clipboard for a url and wraps the selected text with it if found
can be used with the : syntax at the end to create a reference with the selected text as the title
ignores and strips !! (link only) and ^ syntax

  # with "http://www.tuaw.com/tag/howto/" in the clipboard
		
  TUAW how-to~
  => [TUAW how-to](http://www.tuaw.com/tag/howto/)
		
  TUAW how-to:~ (or "TUAW how-to~:")
  => [TUAW how-to]: http://www.tuaw.com/tag/howto/
!example.com searches become site-specific web searches
for single-line searches, text in parenthesis is searched (as additional search terms) but not included in the link text
in single line searches without []() format, text surrounded in quotes becomes the link text
!g "Six Barrel Shotgun" black rebel is the same as !g Six Barrel Shotgun (black rebel)
!spell search replaces selection with most relative spelling correction
works on entire blocks of text
you can use a colon in a bracketed search, and if it's alone on a line it will create a reference link definition
if an identical link results in future searches, it will re-use the id of the generated reference definition
if the resulting link already exists, any defined reference id will be replaced with the existing definition's id
the reference definition will be moved to the end of the document
create footnotes with [id](^footnote text)
if id isn't specified, one is generated
footnotes are collected at the end and added with line breaks surrounding
!h for searching your own web history
configure search types in ~/.searchlink

      history_types:
     ---chrome_history
     ---chrome_bookmarks
     ---safari_bookmarks
     ---safari_history
use !h[sc][hb] to configure on the fly

!hsb only searches (s)afari (b)ookmarks
!hsbh searches safari bookmarks and history
!chsb searches chrome history and safari bookmarks
!h searches all configured types from ~/.searchlink #### New configuration options
~/.searchlink
config option to validate links (validate_links)
custom search definitions with a value starting with http or / and including $term in the string will simply have the value returned with the $term replaced with the input
$termd lowercases the text in the replacement string
More than one $term can be used by adding numbers after them
$term1, $term2
the search terms given are separated by a space
if there are more terms than tokens, the additional terms are appended to the last token
$term1d works for lowercasing
replacements are URL encoded
report option outputs verbose info on multi-line searches
set configuration options with MMD metadata (per document) or flags (per link)
The following headers can be set in MMD: debug, country_code, inline, prefix_random, include_titles, validate_links
headers set at the top of the document
key: value
e.g. debug: true
Headers set in MMD metadata are global (unless overridden by a flag) and not removed from the output
The following can be switched per link with --(no-)key: inline, include_titles, validate_links
flags are removed from the search and the output
values changed by flags are restored after processing each link
flags can be used in custom search engine definitions
flags in definitions are overridden by flags in the input
use this for applications such as never validating links of a certain type:

  # In ~/.searchlink:
  custom_site_searches
      # lowercases the query and never validates
      tag: http://brettterpstra.com/topic/$termd/ --no-validate_links
			
  $ !btt markdown
			
  => [markdown](http://brettterpstra.com/topic/markdown/)
Shortcuts are available for some flags.
debug = d, inline = i, include_titles = t , and validate_links = v
Enable options with ++[options], disable with --[options].
Multiple options can be grouped together
both ++ and -- can be used in the same link
only the first appearance of a flag is used, repeats are ignored
example:

  # do a google search for the link text
  # additional (+) search terms appended to query
  # no link validation (--v)
  # create an inline link with a title (++it)
  [Martha Stewart](!g --v ++it)

  => [Martha Stewart](http://www.marthastewart.com/ "Martha Stewart---Recipes, DIY, Home Decor &amp; Crafts")
Output formatting improvements

link format only forces inline if a single line (no newlines) is selected
groups new reference definitions with any existing definitions at end of selection to keep full-document selections looking tidy
detects existing random prefix and continues pattern for easier search and replace
duplicate urls properly re-use existing reference titles
links in code blocks (indented or fenced) are ignored
reports and errors are removed and replaced when running on a full document
Jump to SearchLink Error service accepts a highlighted error line and jumps to its position in the document, highlighting the offending match



SearchLink 2.0 is up now. I had enough changes to make after the last version---which I already thought was a pretty big step forward---that I decided it was time for a major version bump. If you're not familliar with SearchLink as a tool for speedier blogging and online writing, see the project page for more info.

External configuration
First, you can now copy all config options to a file called ".searchlink" in your home folder and SearchLink will read configuration options from that, overriding what's in the Automator action. If/when new options are added, you'll have to manually paste override values into the config file, but the benefit is that you won't have to reconfigure existing options every time you update to the latest version.

Custom search definitions
This file is a great place to work with the new "custom site search" feature. You can define shortcuts (and even override existing ones) with custom Google site searches. You just define the shorthand and tell it which specific site to search when it encounters your !xx markers.

You can edit this directly in the Automator Workflow's "Run Shell Script" action, or copy the below into your ~/.searchlink file and modify there:

custom_site_searches ||= {
  "bt" => "brettterpstra.com",
  "md" => "www.macdrifter.com"
}
Easier Google searches
In the last version I made it possible to select any text and treat it as a Google search without needing any [](!g) syntax. This version allows you to use just [text]() to default to a Google search for the text in the square brackets. You can also use variants:

[]("search terms")
Updates the link with the results of the search terms, using the title of the located page as the text for the link.
[me]("brett terpstra")
The word "me" will be replaced with the results of the search for "brett terpstra," keeping "me" as the link text. 
