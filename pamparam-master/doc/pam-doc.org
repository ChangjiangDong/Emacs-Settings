* Intro
Pamparam is a new spaced repetition (SR) memory cards implementation
for Emacs.
** Quickstart
Let's assume you're a skeptical type, which you should be considering
a quality software like Anki already exists. This section provides a
minimum of steps to get try out =pamparam=.
*** Step 1
Procure a master file - it's an Org-mode file with things you want to
learn. Each level 2 outline in this file that's a child to a level 1
outline tagged =:cards:= defines a new card. The outline name is the
front and the outline body is the back.

Example:
#+begin_src org
,* Musical tastes                                                                         :cards:
,** Queen
good
,** Kenye West
bad
,** Dire Straits
good
,** U2
meh
,* Dutch words                                                                            :cards:
,** bakery
de bakkerij
,** chocolate sprinkles
de hagelslag
,** coffee
de koffie
#+end_src

As you can see, the master file is a great summary of the info that
you have available. It's easy to search and organize.
*** Step 2
Open the master file and call =pam-sync=. It will create a Git
repository in the same directory as the master file. All card files
and schedule files will be tracked in this Git repository.

At any later stage, when you want to either add new cards or correct
one of the existing cards, call =pam-sync= in the master file.
**** optional
You can examine the Git repository if you like, it has a very simple
structure.

1. ./.git/ keeps track of history.
2. ./cards/ holds all the cards. Each card is an Org file named after
   the md5 of the card front and back.
3. ./pampile.org holds all cards that you haven't touched
   once. =pam-sync= adds to this file, =pam-pull= removes from it.
4. ./pam-YYYY-MM-DD.org holds the cards scheduled for the
   corresponding day. The dates are current day plus future, past days
   are removed. If you miss items on their designated day, they are
   moved to the front of today's items.
*** Step 3
Call =pam-drill= from any file inside the Git repository.
**** optional
You can later set =pam-path= to the location of your git repository and
be able to call =pam-drill= from anywhere.

#+begin_src elisp
(setq pam-path "~/org/stuff.pam/")
#+end_src
*** Step 4
When prompted for an answer, enter it and press ~.~ (dot) to confirm the
answer. It's OK to reveal the outlines with ~S-TAB~, but you'll get a
lower score that way.
*** Step 5
If you finish all of today's cards, either come back tomorrow or use
=pam-pull= to pull in more cards from =pampile.org=.
** Inspiration for the name
It's all about dem catchy names, as far as I'm concerned. Once I got a
nice name for something, it's a real shame to not implement it and
have the name go to waste.

"Pam" is the root of Ukrainian word "пам'ятати", which translates to
the verb "to remember". Additionally, I'm really amused by this quote:

#+BEGIN_QUOTE
"PAMPARAM PAM PAM PARAM PAMPARAM"

 -- random guard in Novigrad
#+END_QUOTE
** Goals
Pamparam tries to improve upon the other SR software that I've used in
the past. I've used the SuperMemo website extensively, and both Anki
and Org-Drill in passing.

Here are the main goals that Pamparam strives to achieve:
1. It has to be Free Software.
2. It has to be in Emacs.
3. It has to be easy to create your own cards.
4. It has to be concentration- and organization-efficient.
5. It has to be keyboard-efficient.
6. Overall efficiency.

The goals G1 and G2 are self-explanatory and easy to achieve. Let's
elaborate on how the other goals are achieved.

To make the explanations more staightforward and specific, let's take
my goal of learning Dutch as an example. This makes it obvius that the
method is well-suited to learning all kinds of languages.

*** G3: ease of card creation
In my studies when I come across a word that I don't know, I record it
in a file =dutch.org= like this:

#+BEGIN_EXAMPLE
,* Cards            :cards:
...
,** comic story
het stripverhal
,*** The Adventures of Tintin is a world famous Belgian comic strip.
De Avonturen van Kuifje is een wereldbekend Belgisch stripverhaal.

,** singer
de zanger
de zangeres
,*** The singer is only know on in Belgium.
De zangeres is alleen in België bekend.
#+END_EXAMPLE

I will refer to =dutch.org= as the master file from now on, since it
will be the source and the master copy of all the automatically
created cards.

The format of the master file is fairly straightforward:

1. There needs to be one or more card sources - first level outlines
   marked with the =:cards:= tag. A separate card file will be created
   for every second or third level child of each card source.
2. For each second or third level outline, the heading name is the
   question and the heading body is the answer. I usually put e.g. a
   noun or a verb into the second level, and a more elaborate example
   of using that noun or a verb into the child third level. I also
   like to organize the words by generation rules and thematically, so
   that e.g. =honest= will be close to =modest= and very close to =honesty=.

   The only hard and enforced requirement is that all heading names
   must be unique.

A single command =pam-sync=, called from the master file, is used to
both create and update cards. In my experience, it's very fast: less
than 5 seconds to create 3000 cards, and less than a second to update.

Note also that if you update the card body in the master file,
=pam-sync= will also update the card file accordingly.

*** G4: concentration- and organization-efficiency
During my new language learning project, I've discovered the Michel
Thomas method audio course. It's a lot bigger on the marketing
than on the content, but there are a few things it gets very right:

#+BEGIN_QUOTE
The responsibility for your learning lies with the teacher, not with
you, the student. There's no such thing as a poor student, only a poor
teacher. Knowing this allows you to relax, to leave off any stress or
anxiety. So get comfortable, relax and let the learning happen to you.
#+END_QUOTE

In all three SR programs, especially Org-drill and Anki, I did feel
the burden of responsibility on me, particularly due to having to
grade my own answers on a 0-5 scale. In my opinion, it creates
unnecessary anxiety: if I set out to do 60 cards in a day, that means
I'm spending that much time hesitating if my answer was a 3 or a 4 or
a 5.

Pamparam uses a simple SM2 for rescheduling cards with a simple
automated grader. You enter your answer based on the card's name and
it's checked against the card's body. The rules are the following:

1. Correct answer (up to whitespace, word case, and word synonyms)
   gets you a perfect 5.
2. Correct answer with the body revealed gives you a 3. It feels like
   cheating, but it really isn't. I actually put in the effort to type
   out the answer that I can read. The mechanical effort ensures that
   I don't breeze through the anwer with an "it's obvious" comment. And
   I find it much better during the early memorization phase to copy
   the answer rather than keep failing to get it right.

   The card gets additionally scheduled for review today. If I give an
   answer the second time with the body open it will be marked as done
   though.
3. Wrong answer gives you a 0.

What about the grade 1,2 and 4? They're not used currently, but may be
introduced later if it can be done in an automated way.  For instance,
confusing the masculine and feminine =de= article with the neuter =het=
article might give the grade 1. And answering a card with grade 3 in
review with the body hidden might be worth a grade 4. And missing by a
single letter might be worth a 2, I guess.

But the most fundamental theory of it all is that you, the student,
should not be responsible for grading and scheduling.
**** Student's part in the decision making
1. Decide that you want to learn for the next 2+ seconds. That's
   right, you can take a break any time, even close Emacs. Everything
   will still be there when you call =pam-drill= once more.
2. Decide how many new cards you wish to add to today's schedule with
   =pam-pull=. This is easy if you do it regularly, just decide e.g. on
   20 new cards every day and forget about it.
3. Put together your master file.

Regarding the first item, in the short term you have no say in /what/
you're going to learn. No analysis paralysis, no prioritizing, simply
keep answering questions one by one until you need a break or there
are no questions left.

The second item allows a lot of flexibility. I think it's a good idea
to set a hard minimum, say 20 cards, and a soft maximum, say 50 cards.
The hard minimum ensures consistent progress, and the soft maximum
prevents you from being overwhelmed later on in the review.

For the third item, having some theory in the process of building your
knowledge database seems exciting and interesting, but an unsorted
stream of information might serve just as well. There's nothing wrong
with simply copying someone's master file, but building your own can
be very rewarding as well.

*** G5: keyboard efficiency
Suppose I'm feeling very clever today, and giving perfect answers
right off the bat. Here's the key sequence of doing all my cards:

1. My custom binding ~C-c y~ calls =pam-drill= to start the session.
2. Immediately, I enter the correct answer and validate it with ~.~ (a dot).
3. Now, the transaction is done and I'm in a revealed card's buffer. I
   can review my progress on the current card, or take a break and
   switch to doing something else.
4. Instead, I press ~n~ (also calls =pam-drill= )to get the prompt for the
   next card.
5. Keep going until all cards are done.

Let's summarize the overhead for 30 cards:

- I pressed ~C-c y~ once.
- I pressed ~.~ 30 times to validate the card.
- I pressed ~n~ 29 times to get a new card.

Assuming the average length of a card answer is 20 characters, the
drivers' overhead is about 10% of the whole keyboard input.  If you
count "." as part of the answer, the overhead is only 5%.

Considering there's no mouse usage and modifier key usage, it seems
very efficient to me. I simply touch type away, with zero perceived
overhead. The answers are case- and punctuation-insensitive, so all I
need (in case of Dutch) are the 26 alpha chars and the dot.
*** G6: overall efficiency
Doing it all in Emacs, it's important to think about the overall speed
of it all. My master file is over 8000 lines long and 200K big. It's
already knocking on Emacs' and Org-mode's limits of working
comfortably.

Using property drawers like =org-drill= falls out of the question: 3
extra lines per property drawer times 3000 cards really bloats the
master file, making it harder to find stuff in.

Putting each card in it's own file sounds pretty good. Then there's
enough space to add all kinds of extra info to each card. And Git
tracks the changes to all of it.

I've used a clever naming trick for the card files: just looking at
the file name already gives Emacs an idea about the file
contents. This speeds up sync by a huge amount: instead of parsing the
master file, then opening 3000 files and comparing the pieces, it
simply has the parsed piece of the master file and checks if the file
already exists with that name. If so, it's already synced.

Searching, although rarely needed, is very fast with =git grep=.
